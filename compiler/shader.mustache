goog.provide('{{namespace}}.{{className}}');
{{#superClass}}
goog.require('{{namespace}}.{{superClass}}');
{{/superClass}}
{{#jsRequires}}
goog.require('{{.}}');
{{/jsRequires}}

/**
 * Autogenerated class for {{className}}.
 * @constructor
 */
{{namespace}}.{{className}} = function(){};

/**
 * Constants declared in JavaScript to be used by Shaders.
 * @type {string}
 * @const
 */
{{namespace}}.{{className}}.JS_CONST =
{{#jsConsts}}
  '#define {{value}} \' +\n' +
  '      ({{expression}}) +\n' +
  '      \'\\n' +
{{/jsConsts}}
  '';

/**
 * The vertex source code.
 * @type {string}
 * @const
 */
{{namespace}}.{{className}}.VERTEX_SOURCE =
    {{namespace}}.{{className}}.JS_CONST + '{{getVertexSource}}';

/**
 * The fragment source code.
 * @type {string}
 * @const
 */
{{namespace}}.{{className}}.FRAGMENT_SOURCE =
        {{namespace}}.{{className}}.JS_CONST + '{{getFragmentSource}}';

/**
 * Map of uniform original name to its minified name.
 * @constructor
 */
{{namespace}}.{{className}}.uniform = {};
{{#getUniforms}}

/**
 * Short name for uniform {{originalName}}
 * @type {string}
 * @const
 */
{{namespace}}.{{className}}.uniform.{{originalName}} = '{{shortName}}';
{{/getUniforms}}


/**
 * Map of attribute original name to its minified name.
 * @constructor
 */
{{namespace}}.{{className}}.attribute = {};
{{#getAttributes}}

/**
 * Short name for attribute {{originalName}}
 * @type {string}
 * @const
 */
{{namespace}}.{{className}}.attribute.{{originalName}} = '{{shortName}}';
{{/getAttributes}}
