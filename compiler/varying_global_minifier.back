// Copyright 2011 Google Inc. All Rights Reserved.

/**
 * @fileoverview Optimizer that minifies access to built in varying globals by
 *     the fragment shader.
 * @author rowillia@google.com (Roy Williams)
 */
goog.provide('glslunit.compiler.VaryingGlobalMinifier');

goog.require('glslunit.NodeCollector');
goog.require('glslunit.compiler.CompilerStep');
goog.require('glslunit.compiler.ShaderProgram');
goog.require('goog.array');



/**
 * Optimizer that reduces the size of all function calls.
 * @constructor
 * @implements {glslunit.compiler.CompilerStep}
 */
glslunit.compiler.VaryingGlobalMinifier = function() {
  goog.base(this);

  /**
   * @type {!Object.<string, string>}
   * @private
   */
  this.globalRenameMap_ = {};

  /**
   * @type {Array.<!Object>}
   * @private
   */
  this.newGlobals = [];
};


/** @override */
glslunit.compiler.VaryingGlobalMinifier.prototype.beforeTransformRoot =
    function(node) {
  var globalNodes = goog.glslunit.utils.BUILTIN_GLOBALS.map(function(x) {
    // Create a dummy node that we can use to test for
    // and
    var result = glslunit.glsl.parser.Parse('global_declaration');
    var nodeName = result.declarators[0].name.name;
    delete result.typeAttribute.qualifier;
    result.initializer.declarators[0].initializer = {
      type: 'identifier',
      name: result.declarators[0].name.name;
    };
    result.declarators[0].name.name = '__temp_' + nodeName;
    return result;
  });
  goog.array.forEach(globalNodes, function(globalNode) {
    var globalIdentifierName = globalNode.declarators[0].initializer.name;
    var globalInstances =
        glsunit.NodeCollector.collectNodes(node, function(node) {
          return node.type == 'identifier' &&
            node.name == globalIdentifierName;
        }).length;
    var currentLength = globalIdentifierName.length * globalInstances;
    var newLength =
      /* Declaration Size */
      glslunit.Generator.getSourceCode(globalNode.typeAttribute).length +
      3 /* Characters for identifier declaration, e.g. ' a=' */ +
      globalIdentifierName.length +
      1 /* semicolon */ +
      /* Instances, assuming each instances gets a 1 char rename */
      globalInstances;
    if (currentLength > newLength) {
      var newName = globalNode.declarators[0].name.name;
      this.globalRenameMap_[globalIdentifierName] = newName;
      this.newGlobals_.push(globalNode);
    }
  });
}
