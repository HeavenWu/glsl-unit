/**
 * @fileoverview
 * @suppress {missingProperties|duplicate|checkVars}
 */
goog.provide("glslunit.glsl.parser");
glslunit.glsl.parser = (function(){
  /* Generated by PEG.js 0.6.1 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "EOF": parse_EOF,
        "_": parse__,
        "additive_expression": parse_additive_expression,
        "additive_operator": parse_additive_operator,
        "assignment_expression": parse_assignment_expression,
        "attribute_qualifier": parse_attribute_qualifier,
        "attribute_type": parse_attribute_type,
        "bitwise_and_expression": parse_bitwise_and_expression,
        "bitwise_and_operator": parse_bitwise_and_operator,
        "bitwise_or_expression": parse_bitwise_or_expression,
        "bitwise_or_operator": parse_bitwise_or_operator,
        "bitwise_xor_expression": parse_bitwise_xor_expression,
        "bitwise_xor_operator": parse_bitwise_xor_operator,
        "bool_constant": parse_bool_constant,
        "comma": parse_comma,
        "comment": parse_comment,
        "compound_statement": parse_compound_statement,
        "condition": parse_condition,
        "conditional_expression": parse_conditional_expression,
        "const_qualifier": parse_const_qualifier,
        "declaration": parse_declaration,
        "declarator": parse_declarator,
        "declarator_array_with_size": parse_declarator_array_with_size,
        "declarator_list": parse_declarator_list,
        "declarator_list_arrays_have_size": parse_declarator_list_arrays_have_size,
        "declarator_list_no_array": parse_declarator_list_no_array,
        "declarator_no_array": parse_declarator_no_array,
        "do_while": parse_do_while,
        "equality_expression": parse_equality_expression,
        "equality_operator": parse_equality_operator,
        "equals": parse_equals,
        "expression_statement": parse_expression_statement,
        "external_declaration": parse_external_declaration,
        "external_statement": parse_external_statement,
        "external_statement_list": parse_external_statement_list,
        "field_selector": parse_field_selector,
        "float_constant": parse_float_constant,
        "float_exponent": parse_float_exponent,
        "for_loop": parse_for_loop,
        "fragment_start": parse_fragment_start,
        "fully_specified_type": parse_fully_specified_type,
        "function_call": parse_function_call,
        "function_definition": parse_function_definition,
        "function_identifier": parse_function_identifier,
        "function_prototype": parse_function_prototype,
        "function_prototype_parameter_list": parse_function_prototype_parameter_list,
        "global_declaration": parse_global_declaration,
        "identifier": parse_identifier,
        "index_accessor": parse_index_accessor,
        "init_declarator": parse_init_declarator,
        "init_declarator_list": parse_init_declarator_list,
        "int_constant": parse_int_constant,
        "iteration_statement": parse_iteration_statement,
        "jump_statement": parse_jump_statement,
        "keyword": parse_keyword,
        "left_brace": parse_left_brace,
        "left_bracket": parse_left_bracket,
        "left_paren": parse_left_paren,
        "locally_specified_type": parse_locally_specified_type,
        "logical_and_expression": parse_logical_and_expression,
        "logical_and_operator": parse_logical_and_operator,
        "logical_or_expression": parse_logical_or_expression,
        "logical_or_operator": parse_logical_or_operator,
        "logical_xor_expression": parse_logical_xor_expression,
        "logical_xor_operator": parse_logical_xor_operator,
        "matrix": parse_matrix,
        "member_list": parse_member_list,
        "multiplicative_expression": parse_multiplicative_expression,
        "multiplicative_operator": parse_multiplicative_operator,
        "newLine": parse_newLine,
        "parameter_declaration": parse_parameter_declaration,
        "parameter_list": parse_parameter_list,
        "parameter_qualifier": parse_parameter_qualifier,
        "paren_expression": parse_paren_expression,
        "postfix_expression": parse_postfix_expression,
        "postfix_expression_no_repeat": parse_postfix_expression_no_repeat,
        "precision_qualifier": parse_precision_qualifier,
        "precision_type": parse_precision_type,
        "preprocessor_else": parse_preprocessor_else,
        "preprocessor_else_if": parse_preprocessor_else_if,
        "preprocessor_end": parse_preprocessor_end,
        "preprocessor_external_branch": parse_preprocessor_external_branch,
        "preprocessor_if": parse_preprocessor_if,
        "preprocessor_operator": parse_preprocessor_operator,
        "preprocessor_statement_branch": parse_preprocessor_statement_branch,
        "primary_expression": parse_primary_expression,
        "relational_expression": parse_relational_expression,
        "relational_operator": parse_relational_operator,
        "reserved": parse_reserved,
        "right_brace": parse_right_brace,
        "right_bracket": parse_right_bracket,
        "right_paren": parse_right_paren,
        "selection_statement": parse_selection_statement,
        "semicolon": parse_semicolon,
        "shift_expression": parse_shift_expression,
        "shift_operator": parse_shift_operator,
        "simple_statement": parse_simple_statement,
        "single_underscore_identifier": parse_single_underscore_identifier,
        "statement_list": parse_statement_list,
        "statement_no_new_scope": parse_statement_no_new_scope,
        "statement_with_scope": parse_statement_with_scope,
        "struct_definition": parse_struct_definition,
        "type_name": parse_type_name,
        "type_qualifier": parse_type_qualifier,
        "unary_expression": parse_unary_expression,
        "vector": parse_vector,
        "vertex_start": parse_vertex_start,
        "void_type": parse_void_type,
        "while_loop": parse_while_loop,
        "while_statement": parse_while_statement
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "external_statement_list";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_vertex_start() {
        var cacheKey = 'vertex_start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = (function() {  shaderType = "vs"; return true; })() ? '' : null;
        if (result2 !== null) {
          var result3 = parse_external_statement_list();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(root) {
                return root;
              })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_fragment_start() {
        var cacheKey = 'fragment_start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = (function() {  shaderType = "fs"; return true; })() ? '' : null;
        if (result2 !== null) {
          var result3 = parse_external_statement_list();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(root) {
                return root;
              })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_newLine() {
        var cacheKey = 'newLine@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[\n]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("[\\n]");
          }
        }
        var result0 = result1 !== null
          ? (function() {
              return "\n";
            })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EOF() {
        var cacheKey = 'EOF@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        if (input.length > pos) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed('any character');
          }
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result1 === null) {
          var result0 = '';
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__() {
        var cacheKey = '_@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result4 = parse_newLine();
        if (result4 !== null) {
          var result1 = result4;
        } else {
          if (input.substr(pos).match(/^[\r	 ]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("[\\r	 ]");
            }
          }
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result2 = parse_comment();
            if (result2 !== null) {
              var result1 = result2;
            } else {
              var result1 = null;;
            };
          };
        }
        if (result1 !== null) {
          var result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            var result4 = parse_newLine();
            if (result4 !== null) {
              var result1 = result4;
            } else {
              if (input.substr(pos).match(/^[\r	 ]/) !== null) {
                var result3 = input.charAt(pos);
                pos++;
              } else {
                var result3 = null;
                if (reportMatchFailures) {
                  matchFailed("[\\r	 ]");
                }
              }
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result2 = parse_comment();
                if (result2 !== null) {
                  var result1 = result2;
                } else {
                  var result1 = null;;
                };
              };
            }
          }
        } else {
          var result0 = null;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("whitespace");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comment() {
        var cacheKey = 'comment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos1 = pos;
        if (input.substr(pos, 2) === "/*") {
          var result9 = "/*";
          pos += 2;
        } else {
          var result9 = null;
          if (reportMatchFailures) {
            matchFailed("\"/*\"");
          }
        }
        if (result9 !== null) {
          var result10 = [];
          var savedPos2 = pos;
          var savedPos3 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 2) === "*/") {
            var result15 = "*/";
            pos += 2;
          } else {
            var result15 = null;
            if (reportMatchFailures) {
              matchFailed("\"*/\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result15 === null) {
            var result13 = '';
          } else {
            var result13 = null;
            pos = savedPos3;
          }
          if (result13 !== null) {
            if (input.length > pos) {
              var result14 = input.charAt(pos);
              pos++;
            } else {
              var result14 = null;
              if (reportMatchFailures) {
                matchFailed('any character');
              }
            }
            if (result14 !== null) {
              var result12 = [result13, result14];
            } else {
              var result12 = null;
              pos = savedPos2;
            }
          } else {
            var result12 = null;
            pos = savedPos2;
          }
          while (result12 !== null) {
            result10.push(result12);
            var savedPos2 = pos;
            var savedPos3 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 2) === "*/") {
              var result15 = "*/";
              pos += 2;
            } else {
              var result15 = null;
              if (reportMatchFailures) {
                matchFailed("\"*/\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result15 === null) {
              var result13 = '';
            } else {
              var result13 = null;
              pos = savedPos3;
            }
            if (result13 !== null) {
              if (input.length > pos) {
                var result14 = input.charAt(pos);
                pos++;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result14 !== null) {
                var result12 = [result13, result14];
              } else {
                var result12 = null;
                pos = savedPos2;
              }
            } else {
              var result12 = null;
              pos = savedPos2;
            }
          }
          if (result10 !== null) {
            if (input.substr(pos, 2) === "*/") {
              var result11 = "*/";
              pos += 2;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"*/\"");
              }
            }
            if (result11 !== null) {
              var result8 = [result9, result10, result11];
            } else {
              var result8 = null;
              pos = savedPos1;
            }
          } else {
            var result8 = null;
            pos = savedPos1;
          }
        } else {
          var result8 = null;
          pos = savedPos1;
        }
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 2) === "//") {
            var result2 = "//";
            pos += 2;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"//\"");
            }
          }
          if (result2 !== null) {
            var result3 = [];
            if (input.substr(pos).match(/^[^\n]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("[^\\n]");
              }
            }
            while (result7 !== null) {
              result3.push(result7);
              if (input.substr(pos).match(/^[^\n]/) !== null) {
                var result7 = input.charAt(pos);
                pos++;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("[^\\n]");
                }
              }
            }
            if (result3 !== null) {
              var result6 = parse_newLine();
              if (result6 !== null) {
                var result4 = result6;
              } else {
                var result5 = parse_EOF();
                if (result5 !== null) {
                  var result4 = result5;
                } else {
                  var result4 = null;;
                };
              }
              if (result4 !== null) {
                var result1 = [result2, result3, result4];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("comment");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_semicolon() {
        var cacheKey = 'semicolon@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result5 = parse__();
        var result1 = result5 !== null ? result5 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === ";") {
            var result2 = ";";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\";\"");
            }
          }
          if (result2 !== null) {
            var result4 = parse__();
            var result3 = result4 !== null ? result4 : '';
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comma() {
        var cacheKey = 'comma@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result5 = parse__();
        var result1 = result5 !== null ? result5 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === ",") {
            var result2 = ",";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\",\"");
            }
          }
          if (result2 !== null) {
            var result4 = parse__();
            var result3 = result4 !== null ? result4 : '';
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_left_bracket() {
        var cacheKey = 'left_bracket@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result5 = parse__();
        var result1 = result5 !== null ? result5 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === "[") {
            var result2 = "[";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"[\"");
            }
          }
          if (result2 !== null) {
            var result4 = parse__();
            var result3 = result4 !== null ? result4 : '';
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_right_bracket() {
        var cacheKey = 'right_bracket@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result5 = parse__();
        var result1 = result5 !== null ? result5 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === "]") {
            var result2 = "]";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"]\"");
            }
          }
          if (result2 !== null) {
            var result4 = parse__();
            var result3 = result4 !== null ? result4 : '';
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_equals() {
        var cacheKey = 'equals@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result5 = parse__();
        var result1 = result5 !== null ? result5 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === "=") {
            var result2 = "=";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          if (result2 !== null) {
            var result4 = parse__();
            var result3 = result4 !== null ? result4 : '';
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_left_paren() {
        var cacheKey = 'left_paren@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result5 = parse__();
        var result1 = result5 !== null ? result5 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === "(") {
            var result2 = "(";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"(\"");
            }
          }
          if (result2 !== null) {
            var result4 = parse__();
            var result3 = result4 !== null ? result4 : '';
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_right_paren() {
        var cacheKey = 'right_paren@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result5 = parse__();
        var result1 = result5 !== null ? result5 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === ")") {
            var result2 = ")";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\")\"");
            }
          }
          if (result2 !== null) {
            var result4 = parse__();
            var result3 = result4 !== null ? result4 : '';
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_left_brace() {
        var cacheKey = 'left_brace@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result5 = parse__();
        var result1 = result5 !== null ? result5 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === "{") {
            var result2 = "{";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"{\"");
            }
          }
          if (result2 !== null) {
            var result4 = parse__();
            var result3 = result4 !== null ? result4 : '';
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_right_brace() {
        var cacheKey = 'right_brace@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result5 = parse__();
        var result1 = result5 !== null ? result5 : '';
        if (result1 !== null) {
          if (input.substr(pos, 1) === "}") {
            var result2 = "}";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"}\"");
            }
          }
          if (result2 !== null) {
            var result4 = parse__();
            var result3 = result4 !== null ? result4 : '';
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_external_statement_list() {
        var cacheKey = 'external_statement_list@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = [];
        var result2 = parse_external_statement();
        while (result2 !== null) {
          result1.push(result2);
          var result2 = parse_external_statement();
        }
        var result0 = result1 !== null
          ? (function(statements) {
                // Skip blank statements.  These were either whitespace or
                var result = new node({
                  type: "root",
                  statements: []
                });
                for (var i = 0; i < statements.length; i++) {
                  if (statements[i]) {
                    result.statements = result.statements.concat(statements[i]);
                  }
                }
                return result;
              })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_external_statement() {
        var cacheKey = 'external_statement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result6 = parse_preprocessor_external_branch();
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result5 = parse_external_declaration();
          if (result5 !== null) {
            var result4 = result5;
          } else {
            var result4 = null;;
          };
        }
        var result3 = result4 !== null
          ? (function(statement) { return statement; })(result4)
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse__();
          var result1 = result2 !== null
            ? (function() { return ""; })()
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_external_declaration() {
        var cacheKey = 'external_declaration@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result4 = parse_function_definition();
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var result3 = parse_global_declaration();
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_preprocessor_operator();
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_struct_definition();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_preprocessor_operator() {
        var cacheKey = 'preprocessor_operator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "#") {
          var result2 = "#";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"#\"");
          }
        }
        if (result2 !== null) {
          if (input.substr(pos, 6) === "define") {
            var result17 = "define";
            pos += 6;
          } else {
            var result17 = null;
            if (reportMatchFailures) {
              matchFailed("\"define\"");
            }
          }
          if (result17 !== null) {
            var result3 = result17;
          } else {
            if (input.substr(pos, 5) === "undef") {
              var result16 = "undef";
              pos += 5;
            } else {
              var result16 = null;
              if (reportMatchFailures) {
                matchFailed("\"undef\"");
              }
            }
            if (result16 !== null) {
              var result3 = result16;
            } else {
              if (input.substr(pos, 6) === "pragma") {
                var result15 = "pragma";
                pos += 6;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("\"pragma\"");
                }
              }
              if (result15 !== null) {
                var result3 = result15;
              } else {
                if (input.substr(pos, 7) === "version") {
                  var result14 = "version";
                  pos += 7;
                } else {
                  var result14 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"version\"");
                  }
                }
                if (result14 !== null) {
                  var result3 = result14;
                } else {
                  if (input.substr(pos, 5) === "error") {
                    var result13 = "error";
                    pos += 5;
                  } else {
                    var result13 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"error\"");
                    }
                  }
                  if (result13 !== null) {
                    var result3 = result13;
                  } else {
                    if (input.substr(pos, 9) === "extension") {
                      var result12 = "extension";
                      pos += 9;
                    } else {
                      var result12 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"extension\"");
                      }
                    }
                    if (result12 !== null) {
                      var result3 = result12;
                    } else {
                      if (input.substr(pos, 4) === "line") {
                        var result11 = "line";
                        pos += 4;
                      } else {
                        var result11 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"line\"");
                        }
                      }
                      if (result11 !== null) {
                        var result3 = result11;
                      } else {
                        var result3 = null;;
                      };
                    };
                  };
                };
              };
            };
          }
          if (result3 !== null) {
            var result4 = parse__();
            if (result4 !== null) {
              var result9 = [];
              if (input.substr(pos).match(/^[^\n]/) !== null) {
                var result10 = input.charAt(pos);
                pos++;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("[^\\n]");
                }
              }
              while (result10 !== null) {
                result9.push(result10);
                if (input.substr(pos).match(/^[^\n]/) !== null) {
                  var result10 = input.charAt(pos);
                  pos++;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("[^\\n]");
                  }
                }
              }
              var result5 = result9 !== null
                ? (function(defname) {return defname.join("")})(result9)
                : null;
              if (result5 !== null) {
                var result8 = parse_newLine();
                if (result8 !== null) {
                  var result6 = result8;
                } else {
                  var result7 = parse_EOF();
                  if (result7 !== null) {
                    var result6 = result7;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(directive, value) {
              return new node({
                type: "preprocessor",
                directive: "#" + directive,
                value: value
              });
            })(result1[1], result1[3])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_preprocessor_if() {
        var cacheKey = 'preprocessor_if@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "#") {
          var result2 = "#";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"#\"");
          }
        }
        if (result2 !== null) {
          if (input.substr(pos, 5) === "ifdef") {
            var result13 = "ifdef";
            pos += 5;
          } else {
            var result13 = null;
            if (reportMatchFailures) {
              matchFailed("\"ifdef\"");
            }
          }
          if (result13 !== null) {
            var result3 = result13;
          } else {
            if (input.substr(pos, 6) === "ifndef") {
              var result12 = "ifndef";
              pos += 6;
            } else {
              var result12 = null;
              if (reportMatchFailures) {
                matchFailed("\"ifndef\"");
              }
            }
            if (result12 !== null) {
              var result3 = result12;
            } else {
              if (input.substr(pos, 2) === "if") {
                var result11 = "if";
                pos += 2;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\"if\"");
                }
              }
              if (result11 !== null) {
                var result3 = result11;
              } else {
                var result3 = null;;
              };
            };
          }
          if (result3 !== null) {
            var result4 = parse__();
            if (result4 !== null) {
              var result9 = [];
              if (input.substr(pos).match(/^[^\n]/) !== null) {
                var result10 = input.charAt(pos);
                pos++;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("[^\\n]");
                }
              }
              while (result10 !== null) {
                result9.push(result10);
                if (input.substr(pos).match(/^[^\n]/) !== null) {
                  var result10 = input.charAt(pos);
                  pos++;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("[^\\n]");
                  }
                }
              }
              var result5 = result9 !== null
                ? (function(defname) {return defname.join("")})(result9)
                : null;
              if (result5 !== null) {
                var result8 = parse_newLine();
                if (result8 !== null) {
                  var result6 = result8;
                } else {
                  var result7 = parse_EOF();
                  if (result7 !== null) {
                    var result6 = result7;
                  } else {
                    var result6 = null;;
                  };
                }
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(directive, value) {
                 return new node({
                   type: "preprocessor",
                   directive: "#" + directive,
                   value: value
                 });
               })(result1[1], result1[3])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_preprocessor_else_if() {
        var cacheKey = 'preprocessor_else_if@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 5) === "#elif") {
          var result2 = "#elif";
          pos += 5;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"#elif\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse__();
          if (result3 !== null) {
            var result8 = [];
            if (input.substr(pos).match(/^[^\n]/) !== null) {
              var result9 = input.charAt(pos);
              pos++;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("[^\\n]");
              }
            }
            while (result9 !== null) {
              result8.push(result9);
              if (input.substr(pos).match(/^[^\n]/) !== null) {
                var result9 = input.charAt(pos);
                pos++;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("[^\\n]");
                }
              }
            }
            var result4 = result8 !== null
              ? (function(defname) {return defname.join("")})(result8)
              : null;
            if (result4 !== null) {
              var result7 = parse_newLine();
              if (result7 !== null) {
                var result5 = result7;
              } else {
                var result6 = parse_EOF();
                if (result6 !== null) {
                  var result5 = result6;
                } else {
                  var result5 = null;;
                };
              }
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(value) {
                return new node({
                  type: "preprocessor",
                  directive: "#elif",
                  value: value
                });
              })(result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_preprocessor_else() {
        var cacheKey = 'preprocessor_else@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 5) === "#else") {
          var result2 = "#else";
          pos += 5;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"#else\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_newLine();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
              return new node({
                type: "preprocessor",
                directive: "#else"
              });
            })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_preprocessor_end() {
        var cacheKey = 'preprocessor_end@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 6) === "#endif") {
          var result1 = "#endif";
          pos += 6;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"#endif\"");
          }
        }
        if (result1 !== null) {
          var result6 = parse_newLine();
          if (result6 !== null) {
            var result2 = result6;
          } else {
            var result5 = parse_EOF();
            if (result5 !== null) {
              var result2 = result5;
            } else {
              var result2 = null;;
            };
          }
          if (result2 !== null) {
            var result4 = parse__();
            var result3 = result4 !== null ? result4 : '';
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_preprocessor_external_branch() {
        var cacheKey = 'preprocessor_external_branch@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos3 = pos;
        var result12 = parse_preprocessor_if();
        if (result12 !== null) {
          var result13 = parse_external_statement_list();
          if (result13 !== null) {
            var result2 = [result12, result13];
          } else {
            var result2 = null;
            pos = savedPos3;
          }
        } else {
          var result2 = null;
          pos = savedPos3;
        }
        if (result2 !== null) {
          var result3 = [];
          var savedPos2 = pos;
          var result10 = parse_preprocessor_else_if();
          if (result10 !== null) {
            var result11 = parse_external_statement_list();
            if (result11 !== null) {
              var result9 = [result10, result11];
            } else {
              var result9 = null;
              pos = savedPos2;
            }
          } else {
            var result9 = null;
            pos = savedPos2;
          }
          while (result9 !== null) {
            result3.push(result9);
            var savedPos2 = pos;
            var result10 = parse_preprocessor_else_if();
            if (result10 !== null) {
              var result11 = parse_external_statement_list();
              if (result11 !== null) {
                var result9 = [result10, result11];
              } else {
                var result9 = null;
                pos = savedPos2;
              }
            } else {
              var result9 = null;
              pos = savedPos2;
            }
          }
          if (result3 !== null) {
            var savedPos1 = pos;
            var result7 = parse_preprocessor_else();
            if (result7 !== null) {
              var result8 = parse_external_statement_list();
              if (result8 !== null) {
                var result6 = [result7, result8];
              } else {
                var result6 = null;
                pos = savedPos1;
              }
            } else {
              var result6 = null;
              pos = savedPos1;
            }
            var result4 = result6 !== null ? result6 : '';
            if (result4 !== null) {
              var result5 = parse_preprocessor_end();
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(if_directive, elif_directive, else_directive) {
                return preprocessor_branch(if_directive, elif_directive, else_directive);
              })(result1[0], result1[1], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_preprocessor_statement_branch() {
        var cacheKey = 'preprocessor_statement_branch@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos3 = pos;
        var result12 = parse_preprocessor_if();
        if (result12 !== null) {
          var result13 = parse_statement_list();
          if (result13 !== null) {
            var result2 = [result12, result13];
          } else {
            var result2 = null;
            pos = savedPos3;
          }
        } else {
          var result2 = null;
          pos = savedPos3;
        }
        if (result2 !== null) {
          var result3 = [];
          var savedPos2 = pos;
          var result10 = parse_preprocessor_else_if();
          if (result10 !== null) {
            var result11 = parse_statement_list();
            if (result11 !== null) {
              var result9 = [result10, result11];
            } else {
              var result9 = null;
              pos = savedPos2;
            }
          } else {
            var result9 = null;
            pos = savedPos2;
          }
          while (result9 !== null) {
            result3.push(result9);
            var savedPos2 = pos;
            var result10 = parse_preprocessor_else_if();
            if (result10 !== null) {
              var result11 = parse_statement_list();
              if (result11 !== null) {
                var result9 = [result10, result11];
              } else {
                var result9 = null;
                pos = savedPos2;
              }
            } else {
              var result9 = null;
              pos = savedPos2;
            }
          }
          if (result3 !== null) {
            var savedPos1 = pos;
            var result7 = parse_preprocessor_else();
            if (result7 !== null) {
              var result8 = parse_statement_list();
              if (result8 !== null) {
                var result6 = [result7, result8];
              } else {
                var result6 = null;
                pos = savedPos1;
              }
            } else {
              var result6 = null;
              pos = savedPos1;
            }
            var result4 = result6 !== null ? result6 : '';
            if (result4 !== null) {
              var result5 = parse_preprocessor_end();
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(if_directive, elif_directive, else_directive) {
                return preprocessor_branch(if_directive, elif_directive, else_directive);
              })(result1[0], result1[1], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_definition() {
        var cacheKey = 'function_definition@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_function_prototype();
        if (result2 !== null) {
          var result3 = parse_compound_statement();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(prototype, body) {
                result = new node({
                  type: "function_declaration",
                  name: prototype.name,
                  returnType: prototype.returnType,
                  parameters: prototype.parameters,
                  body: body
                });
                return result;
            })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_compound_statement() {
        var cacheKey = 'compound_statement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_left_brace();
        if (result2 !== null) {
          var result5 = parse_statement_list();
          var result3 = result5 !== null ? result5 : '';
          if (result3 !== null) {
            var result4 = parse_right_brace();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(statements) {
                result = new node({
                  type: "scope",
                  statements: []
                });
                if (statements && statements.statements) {
                  result.statements = statements.statements;
                }
                return result;
              })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_statement_list() {
        var cacheKey = 'statement_list@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result7 = parse__();
        var result2 = result7 !== null ? result7 : '';
        if (result2 !== null) {
          var result3 = [];
          var result6 = parse_statement_no_new_scope();
          while (result6 !== null) {
            result3.push(result6);
            var result6 = parse_statement_no_new_scope();
          }
          if (result3 !== null) {
            var result5 = parse__();
            var result4 = result5 !== null ? result5 : '';
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(list) {return {statements: list};})(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_statement_no_new_scope() {
        var cacheKey = 'statement_no_new_scope@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_compound_statement();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_simple_statement();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_preprocessor_statement_branch();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_statement_with_scope() {
        var cacheKey = 'statement_with_scope@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_compound_statement();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_simple_statement();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_preprocessor_statement_branch();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_simple_statement() {
        var cacheKey = 'simple_statement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result7 = parse_declaration();
        if (result7 !== null) {
          var result1 = result7;
        } else {
          var result6 = parse_expression_statement();
          if (result6 !== null) {
            var result1 = result6;
          } else {
            var result5 = parse_selection_statement();
            if (result5 !== null) {
              var result1 = result5;
            } else {
              var result4 = parse_iteration_statement();
              if (result4 !== null) {
                var result1 = result4;
              } else {
                var result3 = parse_jump_statement();
                if (result3 !== null) {
                  var result1 = result3;
                } else {
                  var result2 = parse_preprocessor_operator();
                  if (result2 !== null) {
                    var result1 = result2;
                  } else {
                    var result1 = null;;
                  };
                };
              };
            };
          };
        }
        var result0 = result1 !== null
          ? (function(statement) {
              return statement;
            })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_selection_statement() {
        var cacheKey = 'selection_statement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "if") {
          var result2 = "if";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"if\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_left_paren();
          if (result3 !== null) {
            var result4 = parse_assignment_expression();
            if (result4 !== null) {
              var result5 = parse_right_paren();
              if (result5 !== null) {
                var result6 = parse_statement_with_scope();
                if (result6 !== null) {
                  var savedPos1 = pos;
                  if (input.substr(pos, 4) === "else") {
                    var result9 = "else";
                    pos += 4;
                  } else {
                    var result9 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"else\"");
                    }
                  }
                  if (result9 !== null) {
                    var result12 = parse__();
                    var result10 = result12 !== null ? result12 : '';
                    if (result10 !== null) {
                      var result11 = parse_statement_with_scope();
                      if (result11 !== null) {
                        var result8 = [result9, result10, result11];
                      } else {
                        var result8 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result8 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result8 = null;
                    pos = savedPos1;
                  }
                  var result7 = result8 !== null ? result8 : '';
                  if (result7 !== null) {
                    var result1 = [result2, result3, result4, result5, result6, result7];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(condition, if_body, else_body) {
                 result = new node({
                   type:"if_statement",
                   condition:condition,
                   body:if_body
                 });
                 if (else_body) {
                   result.elseBody = else_body[2];
                 }
                 return result;
               })(result1[2], result1[4], result1[5])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_for_loop() {
        var cacheKey = 'for_loop@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 3) === "for") {
          var result2 = "for";
          pos += 3;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"for\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_left_paren();
          if (result3 !== null) {
            var result13 = parse_expression_statement();
            if (result13 !== null) {
              var result4 = result13;
            } else {
              var result12 = parse_declaration();
              if (result12 !== null) {
                var result4 = result12;
              } else {
                var result4 = null;;
              };
            }
            if (result4 !== null) {
              var result11 = parse_condition();
              var result5 = result11 !== null ? result11 : '';
              if (result5 !== null) {
                var result6 = parse_semicolon();
                if (result6 !== null) {
                  var result10 = parse_assignment_expression();
                  var result7 = result10 !== null ? result10 : '';
                  if (result7 !== null) {
                    var result8 = parse_right_paren();
                    if (result8 !== null) {
                      var result9 = parse_statement_no_new_scope();
                      if (result9 !== null) {
                        var result1 = [result2, result3, result4, result5, result6, result7, result8, result9];
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(initializer, condition, increment, body) {
                  return new node({
                    type:"for_statement",
                    initializer:initializer,
                    condition:condition,
                    increment:increment,
                    body:body
                  });
                })(result1[2], result1[3], result1[5], result1[7])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_while_statement() {
        var cacheKey = 'while_statement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 5) === "while") {
          var result2 = "while";
          pos += 5;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"while\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_left_paren();
          if (result3 !== null) {
            var result4 = parse_condition();
            if (result4 !== null) {
              var result5 = parse_right_paren();
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(condition) {
                 return {
                   condition:condition
                 };
               })(result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_while_loop() {
        var cacheKey = 'while_loop@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_while_statement();
        if (result2 !== null) {
          var result3 = parse_statement_no_new_scope();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(w, body) {
                return new node({
                  type: "while_statement",
                  condition: w.condition,
                  body: body
                });
              })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_do_while() {
        var cacheKey = 'do_while@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "do") {
          var result2 = "do";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"do\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_statement_with_scope();
          if (result3 !== null) {
            var result4 = parse_while_statement();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(body, w) {
                 return new node({
                   type: "do_statement",
                   condition: w.condition,
                   body: body
                 });
               })(result1[1], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_iteration_statement() {
        var cacheKey = 'iteration_statement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_while_loop();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_do_while();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_for_loop();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_jump_statement() {
        var cacheKey = 'jump_statement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos5 = pos;
        if (input.substr(pos, 6) === "return") {
          var result20 = "return";
          pos += 6;
        } else {
          var result20 = null;
          if (reportMatchFailures) {
            matchFailed("\"return\"");
          }
        }
        if (result20 !== null) {
          var result21 = parse_assignment_expression();
          if (result21 !== null) {
            var result22 = parse_semicolon();
            if (result22 !== null) {
              var result19 = [result20, result21, result22];
            } else {
              var result19 = null;
              pos = savedPos5;
            }
          } else {
            var result19 = null;
            pos = savedPos5;
          }
        } else {
          var result19 = null;
          pos = savedPos5;
        }
        var result18 = result19 !== null
          ? (function(expression) {
                return new node({
                  type: "return",
                  value: expression
                });
              })(result19[1])
          : null;
        if (result18 !== null) {
          var result0 = result18;
        } else {
          var savedPos4 = pos;
          if (input.substr(pos, 8) === "continue") {
            var result16 = "continue";
            pos += 8;
          } else {
            var result16 = null;
            if (reportMatchFailures) {
              matchFailed("\"continue\"");
            }
          }
          if (result16 !== null) {
            var result17 = parse_semicolon();
            if (result17 !== null) {
              var result15 = [result16, result17];
            } else {
              var result15 = null;
              pos = savedPos4;
            }
          } else {
            var result15 = null;
            pos = savedPos4;
          }
          if (result15 !== null) {
            var result2 = result15;
          } else {
            var savedPos3 = pos;
            if (input.substr(pos, 5) === "break") {
              var result13 = "break";
              pos += 5;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("\"break\"");
              }
            }
            if (result13 !== null) {
              var result14 = parse_semicolon();
              if (result14 !== null) {
                var result12 = [result13, result14];
              } else {
                var result12 = null;
                pos = savedPos3;
              }
            } else {
              var result12 = null;
              pos = savedPos3;
            }
            if (result12 !== null) {
              var result2 = result12;
            } else {
              var savedPos2 = pos;
              if (input.substr(pos, 6) === "return") {
                var result10 = "return";
                pos += 6;
              } else {
                var result10 = null;
                if (reportMatchFailures) {
                  matchFailed("\"return\"");
                }
              }
              if (result10 !== null) {
                var result11 = parse_semicolon();
                if (result11 !== null) {
                  var result9 = [result10, result11];
                } else {
                  var result9 = null;
                  pos = savedPos2;
                }
              } else {
                var result9 = null;
                pos = savedPos2;
              }
              if (result9 !== null) {
                var result2 = result9;
              } else {
                var savedPos0 = pos;
                var savedPos1 = pos;
                var result7 = (function() { return shaderType == "fs" })() ? '' : null;
                if (result7 !== null) {
                  if (input.substr(pos, 7) === "discard") {
                    var result8 = "discard";
                    pos += 7;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"discard\"");
                    }
                  }
                  if (result8 !== null) {
                    var result6 = [result7, result8];
                  } else {
                    var result6 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos1;
                }
                var result4 = result6 !== null
                  ? (function() {return "discard";})()
                  : null;
                if (result4 !== null) {
                  var result5 = parse_semicolon();
                  if (result5 !== null) {
                    var result3 = [result4, result5];
                  } else {
                    var result3 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
                if (result3 !== null) {
                  var result2 = result3;
                } else {
                  var result2 = null;;
                };
              };
            };
          }
          var result1 = result2 !== null
            ? (function(type) {
                        return new node({
                          type:type[0]
                        });
                      })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expression_statement() {
        var cacheKey = 'expression_statement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_assignment_expression();
        var result2 = result4 !== null ? result4 : '';
        if (result2 !== null) {
          var result3 = parse_semicolon();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(e) {
                return new node({
                  type: "expression",
                  expression: e
                });
            })(result1[0])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_declaration() {
        var cacheKey = 'declaration@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos4 = pos;
        var result28 = parse_function_prototype();
        if (result28 !== null) {
          var result29 = parse_semicolon();
          if (result29 !== null) {
            var result27 = [result28, result29];
          } else {
            var result27 = null;
            pos = savedPos4;
          }
        } else {
          var result27 = null;
          pos = savedPos4;
        }
        var result26 = result27 !== null
          ? (function(function_prototype) {
                return function_prototype;
              })(result27[0])
          : null;
        if (result26 !== null) {
          var result0 = result26;
        } else {
          var savedPos3 = pos;
          var result22 = parse_locally_specified_type();
          if (result22 !== null) {
            var result23 = parse__();
            if (result23 !== null) {
              var result24 = parse_init_declarator_list();
              if (result24 !== null) {
                var result25 = parse_semicolon();
                if (result25 !== null) {
                  var result21 = [result22, result23, result24, result25];
                } else {
                  var result21 = null;
                  pos = savedPos3;
                }
              } else {
                var result21 = null;
                pos = savedPos3;
              }
            } else {
              var result21 = null;
              pos = savedPos3;
            }
          } else {
            var result21 = null;
            pos = savedPos3;
          }
          var result20 = result21 !== null
            ? (function(type, declarators) {
                  return new node({
                    type: "declarator",
                    typeAttribute: type,
                    declarators: declarators
                  });
                })(result21[0], result21[2])
            : null;
          if (result20 !== null) {
            var result0 = result20;
          } else {
            var savedPos1 = pos;
            var result11 = (function() { return shaderType == "vs"; })() ? '' : null;
            if (result11 !== null) {
              if (input.substr(pos, 9) === "invariant") {
                var result12 = "invariant";
                pos += 9;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("\"invariant\"");
                }
              }
              if (result12 !== null) {
                var result13 = parse__();
                if (result13 !== null) {
                  var result14 = parse_identifier();
                  if (result14 !== null) {
                    var result15 = [];
                    var savedPos2 = pos;
                    var result18 = parse_comma();
                    if (result18 !== null) {
                      var result19 = parse_identifier();
                      if (result19 !== null) {
                        var result17 = [result18, result19];
                      } else {
                        var result17 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result17 = null;
                      pos = savedPos2;
                    }
                    while (result17 !== null) {
                      result15.push(result17);
                      var savedPos2 = pos;
                      var result18 = parse_comma();
                      if (result18 !== null) {
                        var result19 = parse_identifier();
                        if (result19 !== null) {
                          var result17 = [result18, result19];
                        } else {
                          var result17 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result17 = null;
                        pos = savedPos2;
                      }
                    }
                    if (result15 !== null) {
                      var result16 = parse_semicolon();
                      if (result16 !== null) {
                        var result10 = [result11, result12, result13, result14, result15, result16];
                      } else {
                        var result10 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result10 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result10 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result10 = null;
                  pos = savedPos1;
                }
              } else {
                var result10 = null;
                pos = savedPos1;
              }
            } else {
              var result10 = null;
              pos = savedPos1;
            }
            var result9 = result10 !== null
              ? (function(head, tail) {
                      var items = [ head ].concat(tail.map(function(item) {
                        return item[1]; }));
                      return new node({
                        type: "invariant",
                        identifiers: items
                      });
                    })(result10[3], result10[4])
              : null;
            if (result9 !== null) {
              var result0 = result9;
            } else {
              var savedPos0 = pos;
              if (input.substr(pos, 9) === "precision") {
                var result3 = "precision";
                pos += 9;
              } else {
                var result3 = null;
                if (reportMatchFailures) {
                  matchFailed("\"precision\"");
                }
              }
              if (result3 !== null) {
                var result4 = parse__();
                if (result4 !== null) {
                  var result5 = parse_precision_qualifier();
                  if (result5 !== null) {
                    var result6 = parse__();
                    if (result6 !== null) {
                      var result7 = parse_type_name();
                      if (result7 !== null) {
                        var result8 = parse_semicolon();
                        if (result8 !== null) {
                          var result2 = [result3, result4, result5, result6, result7, result8];
                        } else {
                          var result2 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result2 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
              var result1 = result2 !== null
                ? (function(precission, type) {
                      return new node({
                        type:"precision",
                        precision: precission,
                        typeName: type
                      });
                    })(result2[2], result2[4])
                : null;
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("declaration");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_global_declaration() {
        var cacheKey = 'global_declaration@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result13 = parse_declaration();
        if (result13 !== null) {
          var result0 = result13;
        } else {
          var savedPos1 = pos;
          var result9 = parse_fully_specified_type();
          if (result9 !== null) {
            var result10 = parse__();
            if (result10 !== null) {
              var result11 = parse_init_declarator_list();
              if (result11 !== null) {
                var result12 = parse_semicolon();
                if (result12 !== null) {
                  var result8 = [result9, result10, result11, result12];
                } else {
                  var result8 = null;
                  pos = savedPos1;
                }
              } else {
                var result8 = null;
                pos = savedPos1;
              }
            } else {
              var result8 = null;
              pos = savedPos1;
            }
          } else {
            var result8 = null;
            pos = savedPos1;
          }
          var result7 = result8 !== null
            ? (function(type, declarators) {
                return new node({
                  type: "declarator",
                  typeAttribute: type,
                  declarators: declarators
                });
              })(result8[0], result8[2])
            : null;
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var savedPos0 = pos;
            var result3 = parse_attribute_type();
            if (result3 !== null) {
              var result4 = parse__();
              if (result4 !== null) {
                var result5 = parse_declarator_list_no_array();
                if (result5 !== null) {
                  var result6 = parse_semicolon();
                  if (result6 !== null) {
                    var result2 = [result3, result4, result5, result6];
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            var result1 = result2 !== null
              ? (function(type, declarators) {
                  return new node({
                    type: "declarator",
                    typeAttribute: type,
                    declarators: declarators
                  });
                })(result2[0], result2[2])
              : null;
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_prototype_parameter_list() {
        var cacheKey = 'function_prototype_parameter_list@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 4) === "void") {
          var result8 = "void";
          pos += 4;
        } else {
          var result8 = null;
          if (reportMatchFailures) {
            matchFailed("\"void\"");
          }
        }
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          var result3 = parse_parameter_declaration();
          if (result3 !== null) {
            var result4 = [];
            var savedPos1 = pos;
            var result6 = parse_comma();
            if (result6 !== null) {
              var result7 = parse_parameter_declaration();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            while (result5 !== null) {
              result4.push(result5);
              var savedPos1 = pos;
              var result6 = parse_comma();
              if (result6 !== null) {
                var result7 = parse_parameter_declaration();
                if (result7 !== null) {
                  var result5 = [result6, result7];
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            }
            if (result4 !== null) {
              var result2 = [result3, result4];
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(head, tail) {
                  return [ head ].concat(tail.map(function(item) { return item[1]; }));
                })(result2[0], result2[1])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_prototype() {
        var cacheKey = 'function_prototype@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result10 = parse_void_type();
        if (result10 !== null) {
          var result2 = result10;
        } else {
          var result9 = parse_precision_type();
          if (result9 !== null) {
            var result2 = result9;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          var result3 = parse__();
          if (result3 !== null) {
            var result4 = parse_identifier();
            if (result4 !== null) {
              var result5 = parse_left_paren();
              if (result5 !== null) {
                var result8 = parse_function_prototype_parameter_list();
                var result6 = result8 !== null ? result8 : '';
                if (result6 !== null) {
                  var result7 = parse_right_paren();
                  if (result7 !== null) {
                    var result1 = [result2, result3, result4, result5, result6, result7];
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(type, identifier, parameters) {
                result = new node({
                  type:"function_prototype",
                  name: identifier.name,
                  returnType: type,
                  parameters: parameters
                });
                if (parameters == "void" || !parameters) {
                  result.parameters = [];
                }
                return result;
              })(result1[0], result1[2], result1[4])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_parameter_qualifier() {
        var cacheKey = 'parameter_qualifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 5) === "inout") {
          var result3 = "inout";
          pos += 5;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"inout\"");
          }
        }
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 2) === "in") {
            var result2 = "in";
            pos += 2;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"in\"");
            }
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            if (input.substr(pos, 3) === "out") {
              var result1 = "out";
              pos += 3;
            } else {
              var result1 = null;
              if (reportMatchFailures) {
                matchFailed("\"out\"");
              }
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_parameter_declaration() {
        var cacheKey = 'parameter_declaration@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos4 = pos;
        var result20 = parse_const_qualifier();
        if (result20 !== null) {
          var result21 = parse__();
          if (result21 !== null) {
            var result19 = [result20, result21];
          } else {
            var result19 = null;
            pos = savedPos4;
          }
        } else {
          var result19 = null;
          pos = savedPos4;
        }
        var result2 = result19 !== null ? result19 : '';
        if (result2 !== null) {
          var savedPos3 = pos;
          var result17 = parse_parameter_qualifier();
          if (result17 !== null) {
            var result18 = parse__();
            if (result18 !== null) {
              var result16 = [result17, result18];
            } else {
              var result16 = null;
              pos = savedPos3;
            }
          } else {
            var result16 = null;
            pos = savedPos3;
          }
          var result3 = result16 !== null ? result16 : '';
          if (result3 !== null) {
            var savedPos2 = pos;
            var result14 = parse_precision_qualifier();
            if (result14 !== null) {
              var result15 = parse__();
              if (result15 !== null) {
                var result13 = [result14, result15];
              } else {
                var result13 = null;
                pos = savedPos2;
              }
            } else {
              var result13 = null;
              pos = savedPos2;
            }
            var result4 = result13 !== null ? result13 : '';
            if (result4 !== null) {
              var result5 = parse_type_name();
              if (result5 !== null) {
                var result6 = parse__();
                if (result6 !== null) {
                  var result7 = parse_identifier();
                  if (result7 !== null) {
                    var savedPos1 = pos;
                    var result10 = parse_left_bracket();
                    if (result10 !== null) {
                      var result11 = parse_conditional_expression();
                      if (result11 !== null) {
                        var result12 = parse_right_bracket();
                        if (result12 !== null) {
                          var result9 = [result10, result11, result12];
                        } else {
                          var result9 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result9 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result9 = null;
                      pos = savedPos1;
                    }
                    var result8 = result9 !== null ? result9 : '';
                    if (result8 !== null) {
                      var result1 = [result2, result3, result4, result5, result6, result7, result8];
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(const_qualifier, parameter, precision, type_name, identifier, array_size) {
              var result = new node({
                type: "parameter",
                type_name: type_name,
                name: identifier.name
              });
              if (const_qualifier) result.typeQualifier = const_qualifier[0];
              if (parameter) result.parameterQualifier = parameter[0];
              if (precision) result.precision = precision[0];
              if (array_size) result.arraySize = array_size[1];
              // "const" is only legal on "in" parameter qualifiers.
              if (result.typeQualifier &&
                  result.parameterQualifier &&
                  result.parameterQualifier != "in") {
                return null;
              } else {
                return result;
              }
            })(result1[0], result1[1], result1[2], result1[3], result1[5], result1[6])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_init_declarator_list() {
        var cacheKey = 'init_declarator_list@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_init_declarator();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse_comma();
          if (result5 !== null) {
            var result6 = parse_init_declarator();
            if (result6 !== null) {
              var result4 = [result5, result6];
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse_comma();
            if (result5 !== null) {
              var result6 = parse_init_declarator();
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
              return [ head ].concat(tail.map(function(item) { return item[1]; }));
            })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_declarator_list() {
        var cacheKey = 'declarator_list@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_declarator();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse_comma();
          if (result5 !== null) {
            var result6 = parse_declarator();
            if (result6 !== null) {
              var result4 = [result5, result6];
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse_comma();
            if (result5 !== null) {
              var result6 = parse_declarator();
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
              return [ head ].concat(tail.map(function(item) { return item[1]; }));
            })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_declarator_list_no_array() {
        var cacheKey = 'declarator_list_no_array@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_declarator_no_array();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse_comma();
          if (result5 !== null) {
            var result6 = parse_declarator_no_array();
            if (result6 !== null) {
              var result4 = [result5, result6];
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse_comma();
            if (result5 !== null) {
              var result6 = parse_declarator_no_array();
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
              return [ head ].concat(tail.map(function(item) { return item[1]; }));
            })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_declarator_list_arrays_have_size() {
        var cacheKey = 'declarator_list_arrays_have_size@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_declarator_array_with_size();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result5 = parse_comma();
          if (result5 !== null) {
            var result6 = parse_declarator_array_with_size();
            if (result6 !== null) {
              var result4 = [result5, result6];
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result5 = parse_comma();
            if (result5 !== null) {
              var result6 = parse_declarator_array_with_size();
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
              return [ head ].concat(tail.map(function(item) { return item[1]; }));
            })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_declarator_no_array() {
        var cacheKey = 'declarator_no_array@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = parse_identifier();
        var result0 = result1 !== null
          ? (function(name) {
                return new node({
                  type: "declarator_item",
                  name:name
                });
              })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_declarator_array_with_size() {
        var cacheKey = 'declarator_array_with_size@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_identifier();
        if (result4 !== null) {
          var result5 = parse_left_bracket();
          if (result5 !== null) {
            var result6 = parse_conditional_expression();
            if (result6 !== null) {
              var result7 = parse_right_bracket();
              if (result7 !== null) {
                var result3 = [result4, result5, result6, result7];
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(name, arraySize) {
                return new node({
                  type: "declarator_item",
                  name: name,
                  arraySize: arraySize,
                  isArray: true
                });
              })(result3[0], result3[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_declarator_no_array();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_declarator() {
        var cacheKey = 'declarator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_identifier();
        if (result4 !== null) {
          var result5 = parse_left_bracket();
          if (result5 !== null) {
            var result6 = parse_right_bracket();
            if (result6 !== null) {
              var result3 = [result4, result5, result6];
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(name) {
                return new node({
                  type: "declarator_item",
                  name: name,
                  isArray: true
                });
              })(result3[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_declarator_array_with_size();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_init_declarator() {
        var cacheKey = 'init_declarator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_identifier();
        if (result4 !== null) {
          var result5 = parse_equals();
          if (result5 !== null) {
            var result6 = parse_conditional_expression();
            if (result6 !== null) {
              var result3 = [result4, result5, result6];
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(name, initializer) {
                return new node({
                  type: "declarator_item",
                  name: name,
                  initializer:initializer
                });
              })(result3[0], result3[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_declarator();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_member_list() {
        var cacheKey = 'member_list@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse_locally_specified_type();
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_declarator_list_arrays_have_size();
            if (result5 !== null) {
              var result6 = parse_semicolon();
              if (result6 !== null) {
                var result2 = [result3, result4, result5, result6];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            var savedPos0 = pos;
            var result3 = parse_locally_specified_type();
            if (result3 !== null) {
              var result4 = parse__();
              if (result4 !== null) {
                var result5 = parse_declarator_list_arrays_have_size();
                if (result5 !== null) {
                  var result6 = parse_semicolon();
                  if (result6 !== null) {
                    var result2 = [result3, result4, result5, result6];
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(declarators) {
               return declarators.map(function(item) {
                 return new node({
                   type: "declarator",
                   typeAttribute: item[0],
                   declarators: item[2]
                 })
                });
            })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_struct_definition() {
        var cacheKey = 'struct_definition@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos2 = pos;
        var result18 = parse_type_qualifier();
        if (result18 !== null) {
          var result15 = result18;
        } else {
          var result17 = parse_attribute_qualifier();
          if (result17 !== null) {
            var result15 = result17;
          } else {
            var result15 = null;;
          };
        }
        if (result15 !== null) {
          var result16 = parse__();
          if (result16 !== null) {
            var result14 = [result15, result16];
          } else {
            var result14 = null;
            pos = savedPos2;
          }
        } else {
          var result14 = null;
          pos = savedPos2;
        }
        var result2 = result14 !== null ? result14 : '';
        if (result2 !== null) {
          if (input.substr(pos, 6) === "struct") {
            var result3 = "struct";
            pos += 6;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"struct\"");
            }
          }
          if (result3 !== null) {
            var savedPos1 = pos;
            var result12 = parse__();
            if (result12 !== null) {
              var result13 = parse_identifier();
              if (result13 !== null) {
                var result11 = [result12, result13];
              } else {
                var result11 = null;
                pos = savedPos1;
              }
            } else {
              var result11 = null;
              pos = savedPos1;
            }
            var result4 = result11 !== null ? result11 : '';
            if (result4 !== null) {
              var result5 = parse_left_brace();
              if (result5 !== null) {
                var result6 = parse_member_list();
                if (result6 !== null) {
                  var result7 = parse_right_brace();
                  if (result7 !== null) {
                    var result10 = parse_declarator_list();
                    var result8 = result10 !== null ? result10 : '';
                    if (result8 !== null) {
                      var result9 = parse_semicolon();
                      if (result9 !== null) {
                        var result1 = [result2, result3, result4, result5, result6, result7, result8, result9];
                      } else {
                        var result1 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(qualifier, identifier, members, declarators) {
                var result = new node({
                  type: "struct_definition",
                  members:members
                });
                if (qualifier) {
                  result.qualifier = qualifier[0];
                }
                if (identifier) {
                  result.name = identifier[1].name;
                  typeNames[result.name] = result;
                }
                if (declarators) {
                  result.declarators = declarators;
                }
                return result;
              })(result1[0], result1[2], result1[4], result1[6])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_precision_type() {
        var cacheKey = 'precision_type@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_precision_qualifier();
        if (result5 !== null) {
          var result6 = parse__();
          if (result6 !== null) {
            var result4 = [result5, result6];
          } else {
            var result4 = null;
            pos = savedPos1;
          }
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        var result2 = result4 !== null ? result4 : '';
        if (result2 !== null) {
          var result3 = parse_type_name();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(precision, name) {
              var result = new node({
                type: "type",
                name: name
              });
              if (precision) result.precision = precision[0];
              return result;
            })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_locally_specified_type() {
        var cacheKey = 'locally_specified_type@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_const_qualifier();
        if (result5 !== null) {
          var result6 = parse__();
          if (result6 !== null) {
            var result4 = [result5, result6];
          } else {
            var result4 = null;
            pos = savedPos1;
          }
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        var result2 = result4 !== null ? result4 : '';
        if (result2 !== null) {
          var result3 = parse_precision_type();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(qualifier, type) {
              var result = type;
              if (qualifier) result.qualifier = qualifier[0];
              return result;
            })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("locally specified type");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_attribute_qualifier() {
        var cacheKey = 'attribute_qualifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = (function() { return shaderType == "vs"; })() ? '' : null;
        if (result2 !== null) {
          if (input.substr(pos, 9) === "attribute") {
            var result3 = "attribute";
            pos += 9;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"attribute\"");
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
              return "attribute";
            })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_attribute_type() {
        var cacheKey = 'attribute_type@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result2 = parse_attribute_qualifier();
        if (result2 !== null) {
          var result3 = parse__();
          if (result3 !== null) {
            var result4 = parse_precision_type();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(qualifier, type) {
              var result = type;
              result.qualifier = qualifier;
              return result;
            })(result1[0], result1[2])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("locally specified type");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_fully_specified_type() {
        var cacheKey = 'fully_specified_type@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_type_qualifier();
        if (result5 !== null) {
          var result6 = parse__();
          if (result6 !== null) {
            var result4 = [result5, result6];
          } else {
            var result4 = null;
            pos = savedPos1;
          }
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        var result2 = result4 !== null ? result4 : '';
        if (result2 !== null) {
          var result3 = parse_precision_type();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(qualifier, type) {
              var result = type;
              if (qualifier) result.qualifier = qualifier[0];
              return result;
            })(result1[0], result1[1])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("fully specified type");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_precision_qualifier() {
        var cacheKey = 'precision_qualifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 5) === "highp") {
          var result3 = "highp";
          pos += 5;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"highp\"");
          }
        }
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 7) === "mediump") {
            var result2 = "mediump";
            pos += 7;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"mediump\"");
            }
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            if (input.substr(pos, 4) === "lowp") {
              var result1 = "lowp";
              pos += 4;
            } else {
              var result1 = null;
              if (reportMatchFailures) {
                matchFailed("\"lowp\"");
              }
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("precision qualifier");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_const_qualifier() {
        var cacheKey = 'const_qualifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 5) === "const") {
          var result0 = "const";
          pos += 5;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("\"const\"");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_type_qualifier() {
        var cacheKey = 'type_qualifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result8 = parse_const_qualifier();
        if (result8 !== null) {
          var result0 = result8;
        } else {
          if (input.substr(pos, 7) === "varying") {
            var result7 = "varying";
            pos += 7;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"varying\"");
            }
          }
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos, 9) === "invariant") {
              var result4 = "invariant";
              pos += 9;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"invariant\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse__();
              if (result5 !== null) {
                if (input.substr(pos, 7) === "varying") {
                  var result6 = "varying";
                  pos += 7;
                } else {
                  var result6 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"varying\"");
                  }
                }
                if (result6 !== null) {
                  var result3 = [result4, result5, result6];
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
            var result2 = result3 !== null
              ? (function() { return "invariant varying"; })()
              : null;
            if (result2 !== null) {
              var result0 = result2;
            } else {
              if (input.substr(pos, 7) === "uniform") {
                var result1 = "uniform";
                pos += 7;
              } else {
                var result1 = null;
                if (reportMatchFailures) {
                  matchFailed("\"uniform\"");
                }
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("type qualifier");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_void_type() {
        var cacheKey = 'void_type@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 4) === "void") {
          var result1 = "void";
          pos += 4;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"void\"");
          }
        }
        var result0 = result1 !== null
          ? (function() {
              return new node({
                type: "type",
                name: "void"
              })
            })()
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("void");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_type_name() {
        var cacheKey = 'type_name@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 5) === "float") {
          var result9 = "float";
          pos += 5;
        } else {
          var result9 = null;
          if (reportMatchFailures) {
            matchFailed("\"float\"");
          }
        }
        if (result9 !== null) {
          var result0 = result9;
        } else {
          if (input.substr(pos, 3) === "int") {
            var result8 = "int";
            pos += 3;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\"int\"");
            }
          }
          if (result8 !== null) {
            var result0 = result8;
          } else {
            if (input.substr(pos, 4) === "bool") {
              var result7 = "bool";
              pos += 4;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"bool\"");
              }
            }
            if (result7 !== null) {
              var result0 = result7;
            } else {
              if (input.substr(pos, 9) === "sampler2D") {
                var result6 = "sampler2D";
                pos += 9;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"sampler2D\"");
                }
              }
              if (result6 !== null) {
                var result0 = result6;
              } else {
                if (input.substr(pos, 11) === "samplerCube") {
                  var result5 = "samplerCube";
                  pos += 11;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"samplerCube\"");
                  }
                }
                if (result5 !== null) {
                  var result0 = result5;
                } else {
                  var result4 = parse_vector();
                  if (result4 !== null) {
                    var result0 = result4;
                  } else {
                    var result3 = parse_matrix();
                    if (result3 !== null) {
                      var result0 = result3;
                    } else {
                      var result2 = parse_identifier();
                      var result1 = result2 !== null
                        ? (function(name) {
                              if (name.name in typeNames) {
                                 return name.name;
                              } else {
                                return null;
                              }
                            })(result2)
                        : null;
                      if (result1 !== null) {
                        var result0 = result1;
                      } else {
                        var result0 = null;;
                      };
                    };
                  };
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("type name");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_identifier() {
        var cacheKey = 'identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos2 = pos;
        var result7 = parse_keyword();
        if (result7 !== null) {
          if (input.substr(pos).match(/^[^A-Za-z_0-9]/) !== null) {
            var result8 = input.charAt(pos);
            pos++;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("[^A-Za-z_0-9]");
            }
          }
          if (result8 !== null) {
            var result6 = [result7, result8];
          } else {
            var result6 = null;
            pos = savedPos2;
          }
        } else {
          var result6 = null;
          pos = savedPos2;
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result6 === null) {
          var result2 = '';
        } else {
          var result2 = null;
          pos = savedPos1;
        }
        if (result2 !== null) {
          if (input.substr(pos).match(/^[A-Za-z_]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("[A-Za-z_]");
            }
          }
          if (result3 !== null) {
            var result4 = [];
            if (input.substr(pos).match(/^[A-Za-z_0-9]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[A-Za-z_0-9]");
              }
            }
            while (result5 !== null) {
              result4.push(result5);
              if (input.substr(pos).match(/^[A-Za-z_0-9]/) !== null) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("[A-Za-z_0-9]");
                }
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
               return new node({
                 type: "identifier",
                 name: head + tail.join("")
               });
            })(result1[1], result1[2])
          : null;
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("identifier");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_keyword() {
        var cacheKey = 'keyword@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 9) === "attribute") {
          var result30 = "attribute";
          pos += 9;
        } else {
          var result30 = null;
          if (reportMatchFailures) {
            matchFailed("\"attribute\"");
          }
        }
        if (result30 !== null) {
          var result0 = result30;
        } else {
          if (input.substr(pos, 5) === "const") {
            var result29 = "const";
            pos += 5;
          } else {
            var result29 = null;
            if (reportMatchFailures) {
              matchFailed("\"const\"");
            }
          }
          if (result29 !== null) {
            var result0 = result29;
          } else {
            if (input.substr(pos, 4) === "bool") {
              var result28 = "bool";
              pos += 4;
            } else {
              var result28 = null;
              if (reportMatchFailures) {
                matchFailed("\"bool\"");
              }
            }
            if (result28 !== null) {
              var result0 = result28;
            } else {
              if (input.substr(pos, 5) === "float") {
                var result27 = "float";
                pos += 5;
              } else {
                var result27 = null;
                if (reportMatchFailures) {
                  matchFailed("\"float\"");
                }
              }
              if (result27 !== null) {
                var result0 = result27;
              } else {
                if (input.substr(pos, 3) === "int") {
                  var result26 = "int";
                  pos += 3;
                } else {
                  var result26 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"int\"");
                  }
                }
                if (result26 !== null) {
                  var result0 = result26;
                } else {
                  if (input.substr(pos, 5) === "break") {
                    var result25 = "break";
                    pos += 5;
                  } else {
                    var result25 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"break\"");
                    }
                  }
                  if (result25 !== null) {
                    var result0 = result25;
                  } else {
                    if (input.substr(pos, 8) === "continue") {
                      var result24 = "continue";
                      pos += 8;
                    } else {
                      var result24 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"continue\"");
                      }
                    }
                    if (result24 !== null) {
                      var result0 = result24;
                    } else {
                      if (input.substr(pos, 2) === "do") {
                        var result23 = "do";
                        pos += 2;
                      } else {
                        var result23 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"do\"");
                        }
                      }
                      if (result23 !== null) {
                        var result0 = result23;
                      } else {
                        if (input.substr(pos, 4) === "else") {
                          var result22 = "else";
                          pos += 4;
                        } else {
                          var result22 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"else\"");
                          }
                        }
                        if (result22 !== null) {
                          var result0 = result22;
                        } else {
                          if (input.substr(pos, 3) === "for") {
                            var result21 = "for";
                            pos += 3;
                          } else {
                            var result21 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"for\"");
                            }
                          }
                          if (result21 !== null) {
                            var result0 = result21;
                          } else {
                            if (input.substr(pos, 2) === "if") {
                              var result20 = "if";
                              pos += 2;
                            } else {
                              var result20 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"if\"");
                              }
                            }
                            if (result20 !== null) {
                              var result0 = result20;
                            } else {
                              if (input.substr(pos, 7) === "discard") {
                                var result19 = "discard";
                                pos += 7;
                              } else {
                                var result19 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"discard\"");
                                }
                              }
                              if (result19 !== null) {
                                var result0 = result19;
                              } else {
                                if (input.substr(pos, 6) === "return") {
                                  var result18 = "return";
                                  pos += 6;
                                } else {
                                  var result18 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"return\"");
                                  }
                                }
                                if (result18 !== null) {
                                  var result0 = result18;
                                } else {
                                  var result17 = parse_vector();
                                  if (result17 !== null) {
                                    var result0 = result17;
                                  } else {
                                    var result16 = parse_matrix();
                                    if (result16 !== null) {
                                      var result0 = result16;
                                    } else {
                                      if (input.substr(pos, 2) === "in") {
                                        var result15 = "in";
                                        pos += 2;
                                      } else {
                                        var result15 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"in\"");
                                        }
                                      }
                                      if (result15 !== null) {
                                        var result0 = result15;
                                      } else {
                                        if (input.substr(pos, 3) === "out") {
                                          var result14 = "out";
                                          pos += 3;
                                        } else {
                                          var result14 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"out\"");
                                          }
                                        }
                                        if (result14 !== null) {
                                          var result0 = result14;
                                        } else {
                                          if (input.substr(pos, 5) === "inout") {
                                            var result13 = "inout";
                                            pos += 5;
                                          } else {
                                            var result13 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\"inout\"");
                                            }
                                          }
                                          if (result13 !== null) {
                                            var result0 = result13;
                                          } else {
                                            if (input.substr(pos, 7) === "uniform") {
                                              var result12 = "uniform";
                                              pos += 7;
                                            } else {
                                              var result12 = null;
                                              if (reportMatchFailures) {
                                                matchFailed("\"uniform\"");
                                              }
                                            }
                                            if (result12 !== null) {
                                              var result0 = result12;
                                            } else {
                                              if (input.substr(pos, 7) === "varying") {
                                                var result11 = "varying";
                                                pos += 7;
                                              } else {
                                                var result11 = null;
                                                if (reportMatchFailures) {
                                                  matchFailed("\"varying\"");
                                                }
                                              }
                                              if (result11 !== null) {
                                                var result0 = result11;
                                              } else {
                                                if (input.substr(pos, 9) === "sampler2D") {
                                                  var result10 = "sampler2D";
                                                  pos += 9;
                                                } else {
                                                  var result10 = null;
                                                  if (reportMatchFailures) {
                                                    matchFailed("\"sampler2D\"");
                                                  }
                                                }
                                                if (result10 !== null) {
                                                  var result0 = result10;
                                                } else {
                                                  if (input.substr(pos, 11) === "samplerCube") {
                                                    var result9 = "samplerCube";
                                                    pos += 11;
                                                  } else {
                                                    var result9 = null;
                                                    if (reportMatchFailures) {
                                                      matchFailed("\"samplerCube\"");
                                                    }
                                                  }
                                                  if (result9 !== null) {
                                                    var result0 = result9;
                                                  } else {
                                                    if (input.substr(pos, 6) === "struct") {
                                                      var result8 = "struct";
                                                      pos += 6;
                                                    } else {
                                                      var result8 = null;
                                                      if (reportMatchFailures) {
                                                        matchFailed("\"struct\"");
                                                      }
                                                    }
                                                    if (result8 !== null) {
                                                      var result0 = result8;
                                                    } else {
                                                      if (input.substr(pos, 4) === "void") {
                                                        var result7 = "void";
                                                        pos += 4;
                                                      } else {
                                                        var result7 = null;
                                                        if (reportMatchFailures) {
                                                          matchFailed("\"void\"");
                                                        }
                                                      }
                                                      if (result7 !== null) {
                                                        var result0 = result7;
                                                      } else {
                                                        if (input.substr(pos, 5) === "while") {
                                                          var result6 = "while";
                                                          pos += 5;
                                                        } else {
                                                          var result6 = null;
                                                          if (reportMatchFailures) {
                                                            matchFailed("\"while\"");
                                                          }
                                                        }
                                                        if (result6 !== null) {
                                                          var result0 = result6;
                                                        } else {
                                                          if (input.substr(pos, 5) === "highp") {
                                                            var result5 = "highp";
                                                            pos += 5;
                                                          } else {
                                                            var result5 = null;
                                                            if (reportMatchFailures) {
                                                              matchFailed("\"highp\"");
                                                            }
                                                          }
                                                          if (result5 !== null) {
                                                            var result0 = result5;
                                                          } else {
                                                            if (input.substr(pos, 7) === "mediump") {
                                                              var result4 = "mediump";
                                                              pos += 7;
                                                            } else {
                                                              var result4 = null;
                                                              if (reportMatchFailures) {
                                                                matchFailed("\"mediump\"");
                                                              }
                                                            }
                                                            if (result4 !== null) {
                                                              var result0 = result4;
                                                            } else {
                                                              if (input.substr(pos, 4) === "lowp") {
                                                                var result3 = "lowp";
                                                                pos += 4;
                                                              } else {
                                                                var result3 = null;
                                                                if (reportMatchFailures) {
                                                                  matchFailed("\"lowp\"");
                                                                }
                                                              }
                                                              if (result3 !== null) {
                                                                var result0 = result3;
                                                              } else {
                                                                if (input.substr(pos, 4) === "true") {
                                                                  var result2 = "true";
                                                                  pos += 4;
                                                                } else {
                                                                  var result2 = null;
                                                                  if (reportMatchFailures) {
                                                                    matchFailed("\"true\"");
                                                                  }
                                                                }
                                                                if (result2 !== null) {
                                                                  var result0 = result2;
                                                                } else {
                                                                  if (input.substr(pos, 5) === "false") {
                                                                    var result1 = "false";
                                                                    pos += 5;
                                                                  } else {
                                                                    var result1 = null;
                                                                    if (reportMatchFailures) {
                                                                      matchFailed("\"false\"");
                                                                    }
                                                                  }
                                                                  if (result1 !== null) {
                                                                    var result0 = result1;
                                                                  } else {
                                                                    var result0 = null;;
                                                                  };
                                                                };
                                                              };
                                                            };
                                                          };
                                                        };
                                                      };
                                                    };
                                                  };
                                                };
                                              };
                                            };
                                          };
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("keyword");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_vector() {
        var cacheKey = 'vector@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[bi]/) !== null) {
          var result5 = input.charAt(pos);
          pos++;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("[bi]");
          }
        }
        var result2 = result5 !== null ? result5 : '';
        if (result2 !== null) {
          if (input.substr(pos, 3) === "vec") {
            var result3 = "vec";
            pos += 3;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"vec\"");
            }
          }
          if (result3 !== null) {
            if (input.substr(pos).match(/^[234]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("[234]");
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(a) { return a.join(""); })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_matrix() {
        var cacheKey = 'matrix@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 3) === "mat") {
          var result2 = "mat";
          pos += 3;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"mat\"");
          }
        }
        if (result2 !== null) {
          if (input.substr(pos).match(/^[234]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("[234]");
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(a) { return a.join(""); })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_reserved() {
        var cacheKey = 'reserved@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result1 = [];
        var result5 = parse_single_underscore_identifier();
        while (result5 !== null) {
          result1.push(result5);
          var result5 = parse_single_underscore_identifier();
        }
        if (result1 !== null) {
          if (input.substr(pos, 2) === "__") {
            var result2 = "__";
            pos += 2;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"__\"");
            }
          }
          if (result2 !== null) {
            var result3 = [];
            if (input.substr(pos).match(/^[A-Za-z_0-9]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("[A-Za-z_0-9]");
              }
            }
            while (result4 !== null) {
              result3.push(result4);
              if (input.substr(pos).match(/^[A-Za-z_0-9]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("[A-Za-z_0-9]");
                }
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("reserved name");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_single_underscore_identifier() {
        var cacheKey = 'single_underscore_identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = [];
        if (input.substr(pos).match(/^[A-Za-z0-9]/) !== null) {
          var result5 = input.charAt(pos);
          pos++;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("[A-Za-z0-9]");
          }
        }
        while (result5 !== null) {
          result1.push(result5);
          if (input.substr(pos).match(/^[A-Za-z0-9]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[A-Za-z0-9]");
            }
          }
        }
        if (result1 !== null) {
          if (input.substr(pos, 1) === "_") {
            var result2 = "_";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"_\"");
            }
          }
          if (result2 !== null) {
            if (input.substr(pos).match(/^[A-Za-z0-9]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("[A-Za-z0-9]");
              }
            }
            if (result4 !== null) {
              var result3 = [];
              while (result4 !== null) {
                result3.push(result4);
                if (input.substr(pos).match(/^[A-Za-z0-9]/) !== null) {
                  var result4 = input.charAt(pos);
                  pos++;
                } else {
                  var result4 = null;
                  if (reportMatchFailures) {
                    matchFailed("[A-Za-z0-9]");
                  }
                }
              }
            } else {
              var result3 = null;
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_int_constant() {
        var cacheKey = 'int_constant@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        if (input.substr(pos).match(/^[1-9]/) !== null) {
          var result16 = input.charAt(pos);
          pos++;
        } else {
          var result16 = null;
          if (reportMatchFailures) {
            matchFailed("[1-9]");
          }
        }
        if (result16 !== null) {
          var result17 = [];
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result18 = input.charAt(pos);
            pos++;
          } else {
            var result18 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          while (result18 !== null) {
            result17.push(result18);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result18 = input.charAt(pos);
              pos++;
            } else {
              var result18 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
          if (result17 !== null) {
            var result15 = [result16, result17];
          } else {
            var result15 = null;
            pos = savedPos2;
          }
        } else {
          var result15 = null;
          pos = savedPos2;
        }
        var result14 = result15 !== null
          ? (function(head, tail) {
                return new node({
                  type: "int",
                  value: parseInt([head].concat(tail).join(""), 10)
                });
              })(result15[0], result15[1])
          : null;
        if (result14 !== null) {
          var result0 = result14;
        } else {
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "0") {
            var result10 = "0";
            pos += 1;
          } else {
            var result10 = null;
            if (reportMatchFailures) {
              matchFailed("\"0\"");
            }
          }
          if (result10 !== null) {
            if (input.substr(pos).match(/^[Xx]/) !== null) {
              var result11 = input.charAt(pos);
              pos++;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("[Xx]");
              }
            }
            if (result11 !== null) {
              if (input.substr(pos).match(/^[0-9A-Fa-f]/) !== null) {
                var result13 = input.charAt(pos);
                pos++;
              } else {
                var result13 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9A-Fa-f]");
                }
              }
              if (result13 !== null) {
                var result12 = [];
                while (result13 !== null) {
                  result12.push(result13);
                  if (input.substr(pos).match(/^[0-9A-Fa-f]/) !== null) {
                    var result13 = input.charAt(pos);
                    pos++;
                  } else {
                    var result13 = null;
                    if (reportMatchFailures) {
                      matchFailed("[0-9A-Fa-f]");
                    }
                  }
                }
              } else {
                var result12 = null;
              }
              if (result12 !== null) {
                var result9 = [result10, result11, result12];
              } else {
                var result9 = null;
                pos = savedPos1;
              }
            } else {
              var result9 = null;
              pos = savedPos1;
            }
          } else {
            var result9 = null;
            pos = savedPos1;
          }
          var result8 = result9 !== null
            ? (function(digits) {
                  return new node({
                    type:"int",
                    value:parseInt(digits.join(""), 16)
                  });
                })(result9[2])
            : null;
          if (result8 !== null) {
            var result0 = result8;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos, 1) === "0") {
              var result5 = "0";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"0\"");
              }
            }
            if (result5 !== null) {
              if (input.substr(pos).match(/^[0-7]/) !== null) {
                var result7 = input.charAt(pos);
                pos++;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-7]");
                }
              }
              if (result7 !== null) {
                var result6 = [];
                while (result7 !== null) {
                  result6.push(result7);
                  if (input.substr(pos).match(/^[0-7]/) !== null) {
                    var result7 = input.charAt(pos);
                    pos++;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("[0-7]");
                    }
                  }
                }
              } else {
                var result6 = null;
              }
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos0;
              }
            } else {
              var result4 = null;
              pos = savedPos0;
            }
            var result3 = result4 !== null
              ? (function(digits) {
                    return new node({
                      type:"int",
                      value:parseInt(digits.join(""), 8)
                    });
                  })(result4[1])
              : null;
            if (result3 !== null) {
              var result0 = result3;
            } else {
              if (input.substr(pos, 1) === "0") {
                var result2 = "0";
                pos += 1;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("\"0\"");
                }
              }
              var result1 = result2 !== null
                ? (function() {
                      return new node({
                        type: "int",
                        value: 0
                      });
                    })()
                : null;
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_float_constant() {
        var cacheKey = 'float_constant@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var result17 = [];
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result23 = input.charAt(pos);
          pos++;
        } else {
          var result23 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        while (result23 !== null) {
          result17.push(result23);
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result23 = input.charAt(pos);
            pos++;
          } else {
            var result23 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
        }
        if (result17 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result18 = ".";
            pos += 1;
          } else {
            var result18 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result18 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result22 = input.charAt(pos);
              pos++;
            } else {
              var result22 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result22 !== null) {
              var result19 = [];
              while (result22 !== null) {
                result19.push(result22);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result22 = input.charAt(pos);
                  pos++;
                } else {
                  var result22 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result19 = null;
            }
            if (result19 !== null) {
              var result21 = parse_float_exponent();
              var result20 = result21 !== null ? result21 : '';
              if (result20 !== null) {
                var result16 = [result17, result18, result19, result20];
              } else {
                var result16 = null;
                pos = savedPos2;
              }
            } else {
              var result16 = null;
              pos = savedPos2;
            }
          } else {
            var result16 = null;
            pos = savedPos2;
          }
        } else {
          var result16 = null;
          pos = savedPos2;
        }
        if (result16 !== null) {
          var result7 = result16;
        } else {
          var savedPos1 = pos;
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result15 = input.charAt(pos);
            pos++;
          } else {
            var result15 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result15 !== null) {
            var result9 = [];
            while (result15 !== null) {
              result9.push(result15);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result15 = input.charAt(pos);
                pos++;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            var result9 = null;
          }
          if (result9 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result10 = ".";
              pos += 1;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("\".\"");
              }
            }
            if (result10 !== null) {
              var result11 = [];
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result14 = input.charAt(pos);
                pos++;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
              while (result14 !== null) {
                result11.push(result14);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result14 = input.charAt(pos);
                  pos++;
                } else {
                  var result14 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
              if (result11 !== null) {
                var result13 = parse_float_exponent();
                var result12 = result13 !== null ? result13 : '';
                if (result12 !== null) {
                  var result8 = [result9, result10, result11, result12];
                } else {
                  var result8 = null;
                  pos = savedPos1;
                }
              } else {
                var result8 = null;
                pos = savedPos1;
              }
            } else {
              var result8 = null;
              pos = savedPos1;
            }
          } else {
            var result8 = null;
            pos = savedPos1;
          }
          if (result8 !== null) {
            var result7 = result8;
          } else {
            var result7 = null;;
          };
        }
        var result6 = result7 !== null
          ? (function(digits) {
                digits[0] = digits[0].join("");
                digits[2] = digits[2].join("");
                return new node({
                  type: "float",
                  value:parseFloat(digits.join(""))
                });
              })(result7)
          : null;
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result5 !== null) {
            var result3 = [];
            while (result5 !== null) {
              result3.push(result5);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result4 = parse_float_exponent();
            if (result4 !== null) {
              var result2 = [result3, result4];
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(digits) {
                  return new node({
                    type: "float",
                    value: parseFloat(digits[0].join("") + digits[1])
                  });
              })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_float_exponent() {
        var cacheKey = 'float_exponent@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[Ee]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("[Ee]");
          }
        }
        if (result2 !== null) {
          if (input.substr(pos).match(/^[+\-]/) !== null) {
            var result6 = input.charAt(pos);
            pos++;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("[+\\-]");
            }
          }
          var result3 = result6 !== null ? result6 : '';
          if (result3 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result5 !== null) {
              var result4 = [];
              while (result5 !== null) {
                result4.push(result5);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result5 = input.charAt(pos);
                  pos++;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result4 = null;
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(sign, exponent) {
                return ["e", sign].concat(exponent).join("");
             })(result1[1], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_paren_expression() {
        var cacheKey = 'paren_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_left_paren();
        if (result2 !== null) {
          var result3 = parse_assignment_expression();
          if (result3 !== null) {
            var result4 = parse_right_paren();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(expression) {
                return expression;
              })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_bool_constant() {
        var cacheKey = 'bool_constant@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 4) === "true") {
          var result3 = "true";
          pos += 4;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"true\"");
          }
        }
        if (result3 !== null) {
          var result1 = result3;
        } else {
          if (input.substr(pos, 5) === "false") {
            var result2 = "false";
            pos += 5;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"false\"");
            }
          }
          if (result2 !== null) {
            var result1 = result2;
          } else {
            var result1 = null;;
          };
        }
        var result0 = result1 !== null
          ? (function(value) {
              return new node({
                type: "bool",
                value: value == "true"
              });
            })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_primary_expression() {
        var cacheKey = 'primary_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result6 = parse_function_call();
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var result5 = parse_identifier();
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_float_constant();
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var result3 = parse_int_constant();
              if (result3 !== null) {
                var result0 = result3;
              } else {
                var result2 = parse_bool_constant();
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  var result1 = parse_paren_expression();
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_index_accessor() {
        var cacheKey = 'index_accessor@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_left_bracket();
        if (result2 !== null) {
          var result3 = parse_assignment_expression();
          if (result3 !== null) {
            var result4 = parse_right_bracket();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(index) {
              return new node({
                type: "accessor",
                index: index
              });
            })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_field_selector() {
        var cacheKey = 'field_selector@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === ".") {
          var result2 = ".";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\".\"");
          }
        }
        if (result2 !== null) {
          var result3 = parse_identifier();
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(id) {
              return new node({
                type: "field_selector",
                selection: id.name
              })
            })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_postfix_expression() {
        var cacheKey = 'postfix_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_primary_expression();
        if (result2 !== null) {
          var result3 = [];
          var result6 = parse_field_selector();
          if (result6 !== null) {
            var result4 = result6;
          } else {
            var result5 = parse_index_accessor();
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          while (result4 !== null) {
            result3.push(result4);
            var result6 = parse_field_selector();
            if (result6 !== null) {
              var result4 = result6;
            } else {
              var result5 = parse_index_accessor();
              if (result5 !== null) {
                var result4 = result5;
              } else {
                var result4 = null;;
              };
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = new node({
                    type: "postfix",
                    operator: tail[i],
                    expression: result
                  })
                }
                return result;
              })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_postfix_expression_no_repeat() {
        var cacheKey = 'postfix_expression_no_repeat@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_postfix_expression();
        if (result2 !== null) {
          if (input.substr(pos, 2) === "++") {
            var result10 = "++";
            pos += 2;
          } else {
            var result10 = null;
            if (reportMatchFailures) {
              matchFailed("\"++\"");
            }
          }
          if (result10 !== null) {
            var result8 = result10;
          } else {
            if (input.substr(pos, 2) === "--") {
              var result9 = "--";
              pos += 2;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"--\"");
              }
            }
            if (result9 !== null) {
              var result8 = result9;
            } else {
              var result8 = null;;
            };
          }
          var result3 = result8 !== null ? result8 : '';
          if (result3 !== null) {
            var result4 = [];
            var result7 = parse_field_selector();
            if (result7 !== null) {
              var result5 = result7;
            } else {
              var result6 = parse_index_accessor();
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
            while (result5 !== null) {
              result4.push(result5);
              var result7 = parse_field_selector();
              if (result7 !== null) {
                var result5 = result7;
              } else {
                var result6 = parse_index_accessor();
                if (result6 !== null) {
                  var result5 = result6;
                } else {
                  var result5 = null;;
                };
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail, rest) {
                var result = head;
                if(tail) {
                  result = new node({
                    type: "postfix",
                    operator: new node({
                      id: next_id++,
                      type: "operator",
                      operator: tail
                    }),
                    expression: result
                  })
                }
                for (var i = 0; i < rest.length; i++) {
                  result = new node({
                    type: "postfix",
                    operator: rest[i],
                    expression: result
                  })
                }
                return result;
              })(result1[0], result1[1], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_parameter_list() {
        var cacheKey = 'parameter_list@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 4) === "void") {
          var result9 = "void";
          pos += 4;
        } else {
          var result9 = null;
          if (reportMatchFailures) {
            matchFailed("\"void\"");
          }
        }
        var result8 = result9 !== null
          ? (function() {return []; })()
          : null;
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          var result3 = parse_assignment_expression();
          if (result3 !== null) {
            var result4 = [];
            var savedPos1 = pos;
            var result6 = parse_comma();
            if (result6 !== null) {
              var result7 = parse_assignment_expression();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            } else {
              var result5 = null;
              pos = savedPos1;
            }
            while (result5 !== null) {
              result4.push(result5);
              var savedPos1 = pos;
              var result6 = parse_comma();
              if (result6 !== null) {
                var result7 = parse_assignment_expression();
                if (result7 !== null) {
                  var result5 = [result6, result7];
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
            }
            if (result4 !== null) {
              var result2 = [result3, result4];
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(head, tail) {
                  return [ head ].concat(tail.map(function(item) { return item[1] }));
                })(result2[0], result2[1])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_call() {
        var cacheKey = 'function_call@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_function_identifier();
        if (result2 !== null) {
          var result3 = parse_left_paren();
          if (result3 !== null) {
            var result6 = parse_parameter_list();
            var result4 = result6 !== null ? result6 : '';
            if (result4 !== null) {
              var result5 = parse_right_paren();
              if (result5 !== null) {
                var result1 = [result2, result3, result4, result5];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(function_name, parameters) {
                var result = new node({
                  type: "function_call",
                  function_name: function_name,
                  parameters: parameters
                });
                if (!parameters) {
                  result.parameters = [];
                }
                return result;
              })(result1[0], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_identifier() {
        var cacheKey = 'function_identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_identifier();
        var result2 = result3 !== null
          ? (function(id) {return id.name;})(result3)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_type_name();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_unary_expression() {
        var cacheKey = 'unary_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "++") {
          var result12 = "++";
          pos += 2;
        } else {
          var result12 = null;
          if (reportMatchFailures) {
            matchFailed("\"++\"");
          }
        }
        if (result12 !== null) {
          var result6 = result12;
        } else {
          if (input.substr(pos, 2) === "--") {
            var result11 = "--";
            pos += 2;
          } else {
            var result11 = null;
            if (reportMatchFailures) {
              matchFailed("\"--\"");
            }
          }
          if (result11 !== null) {
            var result6 = result11;
          } else {
            if (input.substr(pos, 1) === "!") {
              var result10 = "!";
              pos += 1;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("\"!\"");
              }
            }
            if (result10 !== null) {
              var result6 = result10;
            } else {
              if (input.substr(pos, 1) === "~") {
                var result9 = "~";
                pos += 1;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\"~\"");
                }
              }
              if (result9 !== null) {
                var result6 = result9;
              } else {
                if (input.substr(pos, 1) === "+") {
                  var result8 = "+";
                  pos += 1;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"+\"");
                  }
                }
                if (result8 !== null) {
                  var result6 = result8;
                } else {
                  if (input.substr(pos, 1) === "-") {
                    var result7 = "-";
                    pos += 1;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"-\"");
                    }
                  }
                  if (result7 !== null) {
                    var result6 = result7;
                  } else {
                    var result6 = null;;
                  };
                };
              };
            };
          };
        }
        var result2 = result6 !== null ? result6 : '';
        if (result2 !== null) {
          var result5 = parse__();
          var result3 = result5 !== null ? result5 : '';
          if (result3 !== null) {
            var result4 = parse_postfix_expression_no_repeat();
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                result = tail
                if (head) {
                  result = new node({
                    type: "unary",
                    expression: result,
                    operator: new node({
                      type: "operator",
                      operator: head
                    })
                  });
                }
                return result;
              })(result1[0], result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_multiplicative_operator() {
        var cacheKey = 'multiplicative_operator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "*") {
          var result7 = "*";
          pos += 1;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\"*\"");
          }
        }
        if (result7 !== null) {
          var result2 = result7;
        } else {
          if (input.substr(pos, 1) === "/") {
            var result6 = "/";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"/\"");
            }
          }
          if (result6 !== null) {
            var result2 = result6;
          } else {
            if (input.substr(pos, 1) === "%") {
              var result5 = "%";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"%\"");
              }
            }
            if (result5 !== null) {
              var result2 = result5;
            } else {
              var result2 = null;;
            };
          };
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "=") {
            var result4 = "=";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result4 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(operator) {
              return new node({
                type: "operator",
                operator: operator
              });
            })(result1[0])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_multiplicative_expression() {
        var cacheKey = 'multiplicative_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_unary_expression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result10 = parse__();
          var result5 = result10 !== null ? result10 : '';
          if (result5 !== null) {
            var result6 = parse_multiplicative_operator();
            if (result6 !== null) {
              var result9 = parse__();
              var result7 = result9 !== null ? result9 : '';
              if (result7 !== null) {
                var result8 = parse_multiplicative_expression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result10 = parse__();
            var result5 = result10 !== null ? result10 : '';
            if (result5 !== null) {
              var result6 = parse_multiplicative_operator();
              if (result6 !== null) {
                var result9 = parse__();
                var result7 = result9 !== null ? result9 : '';
                if (result7 !== null) {
                  var result8 = parse_multiplicative_expression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                return daisy_chain(head, tail);
              })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_additive_operator() {
        var cacheKey = 'additive_operator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        if (input.substr(pos, 1) === "+") {
          var result10 = "+";
          pos += 1;
        } else {
          var result10 = null;
          if (reportMatchFailures) {
            matchFailed("\"+\"");
          }
        }
        if (result10 !== null) {
          var savedPos3 = pos;
          var savedReportMatchFailuresVar1 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "+") {
            var result14 = "+";
            pos += 1;
          } else {
            var result14 = null;
            if (reportMatchFailures) {
              matchFailed("\"+\"");
            }
          }
          if (result14 !== null) {
            var result12 = result14;
          } else {
            if (input.substr(pos, 1) === "=") {
              var result13 = "=";
              pos += 1;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("\"=\"");
              }
            }
            if (result13 !== null) {
              var result12 = result13;
            } else {
              var result12 = null;;
            };
          }
          reportMatchFailures = savedReportMatchFailuresVar1;
          if (result12 === null) {
            var result11 = '';
          } else {
            var result11 = null;
            pos = savedPos3;
          }
          if (result11 !== null) {
            var result9 = [result10, result11];
          } else {
            var result9 = null;
            pos = savedPos2;
          }
        } else {
          var result9 = null;
          pos = savedPos2;
        }
        var result8 = result9 !== null
          ? (function() {
              return new node({
                type: "operator",
                operator: "+"
              });
            })()
          : null;
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "-") {
            var result3 = "-";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"-\"");
            }
          }
          if (result3 !== null) {
            var savedPos1 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 1) === "-") {
              var result7 = "-";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"-\"");
              }
            }
            if (result7 !== null) {
              var result5 = result7;
            } else {
              if (input.substr(pos, 1) === "=") {
                var result6 = "=";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"=\"");
                }
              }
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result5 === null) {
              var result4 = '';
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result2 = [result3, result4];
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function() {
                return new node({
                  type: "operator",
                  operator: "-"
                });
              })()
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_additive_expression() {
        var cacheKey = 'additive_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_multiplicative_expression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result10 = parse__();
          var result5 = result10 !== null ? result10 : '';
          if (result5 !== null) {
            var result6 = parse_additive_operator();
            if (result6 !== null) {
              var result9 = parse__();
              var result7 = result9 !== null ? result9 : '';
              if (result7 !== null) {
                var result8 = parse_additive_expression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result10 = parse__();
            var result5 = result10 !== null ? result10 : '';
            if (result5 !== null) {
              var result6 = parse_additive_operator();
              if (result6 !== null) {
                var result9 = parse__();
                var result7 = result9 !== null ? result9 : '';
                if (result7 !== null) {
                  var result8 = parse_additive_expression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                return daisy_chain(head, tail);
              })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_shift_operator() {
        var cacheKey = 'shift_operator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "<<") {
          var result6 = "<<";
          pos += 2;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("\"<<\"");
          }
        }
        if (result6 !== null) {
          var result2 = result6;
        } else {
          if (input.substr(pos, 2) === ">>") {
            var result5 = ">>";
            pos += 2;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\">>\"");
            }
          }
          if (result5 !== null) {
            var result2 = result5;
          } else {
            var result2 = null;;
          };
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "=") {
            var result4 = "=";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result4 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(operator) {
              return new node({
                type: "operator",
                operator: operator
              });
            })(result1[0])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_shift_expression() {
        var cacheKey = 'shift_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_additive_expression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result10 = parse__();
          var result5 = result10 !== null ? result10 : '';
          if (result5 !== null) {
            var result6 = parse_shift_operator();
            if (result6 !== null) {
              var result9 = parse__();
              var result7 = result9 !== null ? result9 : '';
              if (result7 !== null) {
                var result8 = parse_shift_expression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result10 = parse__();
            var result5 = result10 !== null ? result10 : '';
            if (result5 !== null) {
              var result6 = parse_shift_operator();
              if (result6 !== null) {
                var result9 = parse__();
                var result7 = result9 !== null ? result9 : '';
                if (result7 !== null) {
                  var result8 = parse_shift_expression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                return daisy_chain(head, tail);
              })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_relational_operator() {
        var cacheKey = 'relational_operator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        if (input.substr(pos, 1) === "<") {
          var result10 = "<";
          pos += 1;
        } else {
          var result10 = null;
          if (reportMatchFailures) {
            matchFailed("\"<\"");
          }
        }
        if (result10 !== null) {
          var savedPos3 = pos;
          var savedReportMatchFailuresVar1 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "<") {
            var result14 = "<";
            pos += 1;
          } else {
            var result14 = null;
            if (reportMatchFailures) {
              matchFailed("\"<\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar1;
          if (result14 === null) {
            var result11 = '';
          } else {
            var result11 = null;
            pos = savedPos3;
          }
          if (result11 !== null) {
            if (input.substr(pos, 1) === "=") {
              var result13 = "=";
              pos += 1;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("\"=\"");
              }
            }
            var result12 = result13 !== null ? result13 : '';
            if (result12 !== null) {
              var result9 = [result10, result11, result12];
            } else {
              var result9 = null;
              pos = savedPos2;
            }
          } else {
            var result9 = null;
            pos = savedPos2;
          }
        } else {
          var result9 = null;
          pos = savedPos2;
        }
        var result8 = result9 !== null
          ? (function(equal) {
              return new node({
                type: "operator",
                operator: "<" + equal
              });
            })(result9[2])
          : null;
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === ">") {
            var result3 = ">";
            pos += 1;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\">\"");
            }
          }
          if (result3 !== null) {
            var savedPos1 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 1) === ">") {
              var result7 = ">";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\">\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result7 === null) {
              var result4 = '';
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "=") {
                var result6 = "=";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"=\"");
                }
              }
              var result5 = result6 !== null ? result6 : '';
              if (result5 !== null) {
                var result2 = [result3, result4, result5];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(equal) {
                return new node({
                  type: "operator",
                  operator: ">" + equal
                });
              })(result2[2])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_relational_expression() {
        var cacheKey = 'relational_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_shift_expression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result10 = parse__();
          var result5 = result10 !== null ? result10 : '';
          if (result5 !== null) {
            var result6 = parse_relational_operator();
            if (result6 !== null) {
              var result9 = parse__();
              var result7 = result9 !== null ? result9 : '';
              if (result7 !== null) {
                var result8 = parse_relational_expression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result10 = parse__();
            var result5 = result10 !== null ? result10 : '';
            if (result5 !== null) {
              var result6 = parse_relational_operator();
              if (result6 !== null) {
                var result9 = parse__();
                var result7 = result9 !== null ? result9 : '';
                if (result7 !== null) {
                  var result8 = parse_relational_expression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                return daisy_chain(head, tail);
              })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_equality_operator() {
        var cacheKey = 'equality_operator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "==") {
          var result3 = "==";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"==\"");
          }
        }
        if (result3 !== null) {
          var result1 = result3;
        } else {
          if (input.substr(pos, 2) === "!=") {
            var result2 = "!=";
            pos += 2;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"!=\"");
            }
          }
          if (result2 !== null) {
            var result1 = result2;
          } else {
            var result1 = null;;
          };
        }
        var result0 = result1 !== null
          ? (function(operator) {
               return new node({
                 type: "operator",
                 operator: operator
               });
             })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_equality_expression() {
        var cacheKey = 'equality_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_relational_expression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result10 = parse__();
          var result5 = result10 !== null ? result10 : '';
          if (result5 !== null) {
            var result6 = parse_equality_operator();
            if (result6 !== null) {
              var result9 = parse__();
              var result7 = result9 !== null ? result9 : '';
              if (result7 !== null) {
                var result8 = parse_equality_expression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result10 = parse__();
            var result5 = result10 !== null ? result10 : '';
            if (result5 !== null) {
              var result6 = parse_equality_operator();
              if (result6 !== null) {
                var result9 = parse__();
                var result7 = result9 !== null ? result9 : '';
                if (result7 !== null) {
                  var result8 = parse_equality_expression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                return daisy_chain(head, tail);
              })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_bitwise_and_operator() {
        var cacheKey = 'bitwise_and_operator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "&") {
          var result2 = "&";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"&\"");
          }
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "=") {
            var result6 = "=";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          if (result6 !== null) {
            var result4 = result6;
          } else {
            if (input.substr(pos, 1) === "&") {
              var result5 = "&";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"&\"");
              }
            }
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result4 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
               return new node({
                 type: "operator",
                 operator: "&"
               });
             })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_bitwise_and_expression() {
        var cacheKey = 'bitwise_and_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_equality_expression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result10 = parse__();
          var result5 = result10 !== null ? result10 : '';
          if (result5 !== null) {
            var result6 = parse_bitwise_and_operator();
            if (result6 !== null) {
              var result9 = parse__();
              var result7 = result9 !== null ? result9 : '';
              if (result7 !== null) {
                var result8 = parse_bitwise_and_expression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result10 = parse__();
            var result5 = result10 !== null ? result10 : '';
            if (result5 !== null) {
              var result6 = parse_bitwise_and_operator();
              if (result6 !== null) {
                var result9 = parse__();
                var result7 = result9 !== null ? result9 : '';
                if (result7 !== null) {
                  var result8 = parse_bitwise_and_expression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                return daisy_chain(head, tail);
              })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_bitwise_xor_operator() {
        var cacheKey = 'bitwise_xor_operator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "^") {
          var result2 = "^";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"^\"");
          }
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "=") {
            var result6 = "=";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          if (result6 !== null) {
            var result4 = result6;
          } else {
            if (input.substr(pos, 1) === "^") {
              var result5 = "^";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"^\"");
              }
            }
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result4 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
               return new node({
                 type: "operator",
                 operator: "^"
               });
             })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_bitwise_xor_expression() {
        var cacheKey = 'bitwise_xor_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_bitwise_and_expression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result10 = parse__();
          var result5 = result10 !== null ? result10 : '';
          if (result5 !== null) {
            var result6 = parse_bitwise_xor_operator();
            if (result6 !== null) {
              var result9 = parse__();
              var result7 = result9 !== null ? result9 : '';
              if (result7 !== null) {
                var result8 = parse_bitwise_xor_expression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result10 = parse__();
            var result5 = result10 !== null ? result10 : '';
            if (result5 !== null) {
              var result6 = parse_bitwise_xor_operator();
              if (result6 !== null) {
                var result9 = parse__();
                var result7 = result9 !== null ? result9 : '';
                if (result7 !== null) {
                  var result8 = parse_bitwise_xor_expression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                return daisy_chain(head, tail);
              })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_bitwise_or_operator() {
        var cacheKey = 'bitwise_or_operator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "|") {
          var result2 = "|";
          pos += 1;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"|\"");
          }
        }
        if (result2 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "=") {
            var result6 = "=";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          if (result6 !== null) {
            var result4 = result6;
          } else {
            if (input.substr(pos, 1) === "|") {
              var result5 = "|";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"|\"");
              }
            }
            if (result5 !== null) {
              var result4 = result5;
            } else {
              var result4 = null;;
            };
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result4 === null) {
            var result3 = '';
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function() {
               return new node({
                 type: "operator",
                 operator: "|"
               });
             })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_bitwise_or_expression() {
        var cacheKey = 'bitwise_or_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_bitwise_xor_expression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result10 = parse__();
          var result5 = result10 !== null ? result10 : '';
          if (result5 !== null) {
            var result6 = parse_bitwise_or_operator();
            if (result6 !== null) {
              var result9 = parse__();
              var result7 = result9 !== null ? result9 : '';
              if (result7 !== null) {
                var result8 = parse_bitwise_or_expression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result10 = parse__();
            var result5 = result10 !== null ? result10 : '';
            if (result5 !== null) {
              var result6 = parse_bitwise_or_operator();
              if (result6 !== null) {
                var result9 = parse__();
                var result7 = result9 !== null ? result9 : '';
                if (result7 !== null) {
                  var result8 = parse_bitwise_or_expression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                return daisy_chain(head, tail);
              })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logical_and_operator() {
        var cacheKey = 'logical_and_operator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "&&") {
          var result1 = "&&";
          pos += 2;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"&&\"");
          }
        }
        var result0 = result1 !== null
          ? (function() {
               return new node({
                 type: "operator",
                 operator: "&&"
               });
             })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logical_and_expression() {
        var cacheKey = 'logical_and_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_bitwise_or_expression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result10 = parse__();
          var result5 = result10 !== null ? result10 : '';
          if (result5 !== null) {
            var result6 = parse_logical_and_operator();
            if (result6 !== null) {
              var result9 = parse__();
              var result7 = result9 !== null ? result9 : '';
              if (result7 !== null) {
                var result8 = parse_logical_and_expression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result10 = parse__();
            var result5 = result10 !== null ? result10 : '';
            if (result5 !== null) {
              var result6 = parse_logical_and_operator();
              if (result6 !== null) {
                var result9 = parse__();
                var result7 = result9 !== null ? result9 : '';
                if (result7 !== null) {
                  var result8 = parse_logical_and_expression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                return daisy_chain(head, tail);
              })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logical_xor_operator() {
        var cacheKey = 'logical_xor_operator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "^^") {
          var result1 = "^^";
          pos += 2;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"^^\"");
          }
        }
        var result0 = result1 !== null
          ? (function() {
               return new node({
                 type: "operator",
                 operator: "^^"
               });
             })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logical_xor_expression() {
        var cacheKey = 'logical_xor_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_logical_and_expression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result10 = parse__();
          var result5 = result10 !== null ? result10 : '';
          if (result5 !== null) {
            var result6 = parse_logical_xor_operator();
            if (result6 !== null) {
              var result9 = parse__();
              var result7 = result9 !== null ? result9 : '';
              if (result7 !== null) {
                var result8 = parse_logical_xor_expression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result10 = parse__();
            var result5 = result10 !== null ? result10 : '';
            if (result5 !== null) {
              var result6 = parse_logical_xor_operator();
              if (result6 !== null) {
                var result9 = parse__();
                var result7 = result9 !== null ? result9 : '';
                if (result7 !== null) {
                  var result8 = parse_logical_xor_expression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                return daisy_chain(head, tail);
              })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logical_or_operator() {
        var cacheKey = 'logical_or_operator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "||") {
          var result1 = "||";
          pos += 2;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"||\"");
          }
        }
        var result0 = result1 !== null
          ? (function() {
               return new node({
                 type: "operator",
                 operator: "||"
               });
             })()
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logical_or_expression() {
        var cacheKey = 'logical_or_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_logical_xor_expression();
        if (result2 !== null) {
          var result3 = [];
          var savedPos1 = pos;
          var result10 = parse__();
          var result5 = result10 !== null ? result10 : '';
          if (result5 !== null) {
            var result6 = parse_logical_or_operator();
            if (result6 !== null) {
              var result9 = parse__();
              var result7 = result9 !== null ? result9 : '';
              if (result7 !== null) {
                var result8 = parse_logical_or_expression();
                if (result8 !== null) {
                  var result4 = [result5, result6, result7, result8];
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result3.push(result4);
            var savedPos1 = pos;
            var result10 = parse__();
            var result5 = result10 !== null ? result10 : '';
            if (result5 !== null) {
              var result6 = parse_logical_or_operator();
              if (result6 !== null) {
                var result9 = parse__();
                var result7 = result9 !== null ? result9 : '';
                if (result7 !== null) {
                  var result8 = parse_logical_or_expression();
                  if (result8 !== null) {
                    var result4 = [result5, result6, result7, result8];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                return daisy_chain(head, tail);
              })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_conditional_expression() {
        var cacheKey = 'conditional_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_logical_or_expression();
        if (result2 !== null) {
          var savedPos1 = pos;
          var result16 = parse__();
          var result5 = result16 !== null ? result16 : '';
          if (result5 !== null) {
            if (input.substr(pos, 1) === "?") {
              var result6 = "?";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"?\"");
              }
            }
            if (result6 !== null) {
              var result15 = parse__();
              var result7 = result15 !== null ? result15 : '';
              if (result7 !== null) {
                var result8 = parse_assignment_expression();
                if (result8 !== null) {
                  var result14 = parse__();
                  var result9 = result14 !== null ? result14 : '';
                  if (result9 !== null) {
                    if (input.substr(pos, 1) === ":") {
                      var result10 = ":";
                      pos += 1;
                    } else {
                      var result10 = null;
                      if (reportMatchFailures) {
                        matchFailed("\":\"");
                      }
                    }
                    if (result10 !== null) {
                      var result13 = parse__();
                      var result11 = result13 !== null ? result13 : '';
                      if (result11 !== null) {
                        var result12 = parse_assignment_expression();
                        if (result12 !== null) {
                          var result4 = [result5, result6, result7, result8, result9, result10, result11, result12];
                        } else {
                          var result4 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result4 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result4 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          var result3 = result4 !== null ? result4 : '';
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(head, tail) {
                result = head;
                if (tail) {
                  result = new node({
                    type: "ternary",
                    condition: head,
                    is_true: tail[3],
                    is_false: tail[7]
                  })
                }
                return result;
              })(result1[0], result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_assignment_expression() {
        var cacheKey = 'assignment_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_conditional_expression();
        if (result4 !== null) {
          var result21 = parse__();
          var result5 = result21 !== null ? result21 : '';
          if (result5 !== null) {
            if (input.substr(pos, 1) === "=") {
              var result20 = "=";
              pos += 1;
            } else {
              var result20 = null;
              if (reportMatchFailures) {
                matchFailed("\"=\"");
              }
            }
            if (result20 !== null) {
              var result6 = result20;
            } else {
              if (input.substr(pos, 2) === "*=") {
                var result19 = "*=";
                pos += 2;
              } else {
                var result19 = null;
                if (reportMatchFailures) {
                  matchFailed("\"*=\"");
                }
              }
              if (result19 !== null) {
                var result6 = result19;
              } else {
                if (input.substr(pos, 2) === "/=") {
                  var result18 = "/=";
                  pos += 2;
                } else {
                  var result18 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"/=\"");
                  }
                }
                if (result18 !== null) {
                  var result6 = result18;
                } else {
                  if (input.substr(pos, 2) === "%=") {
                    var result17 = "%=";
                    pos += 2;
                  } else {
                    var result17 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"%=\"");
                    }
                  }
                  if (result17 !== null) {
                    var result6 = result17;
                  } else {
                    if (input.substr(pos, 2) === "+=") {
                      var result16 = "+=";
                      pos += 2;
                    } else {
                      var result16 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"+=\"");
                      }
                    }
                    if (result16 !== null) {
                      var result6 = result16;
                    } else {
                      if (input.substr(pos, 2) === "-=") {
                        var result15 = "-=";
                        pos += 2;
                      } else {
                        var result15 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"-=\"");
                        }
                      }
                      if (result15 !== null) {
                        var result6 = result15;
                      } else {
                        if (input.substr(pos, 3) === "<<=") {
                          var result14 = "<<=";
                          pos += 3;
                        } else {
                          var result14 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"<<=\"");
                          }
                        }
                        if (result14 !== null) {
                          var result6 = result14;
                        } else {
                          if (input.substr(pos, 3) === ">>=") {
                            var result13 = ">>=";
                            pos += 3;
                          } else {
                            var result13 = null;
                            if (reportMatchFailures) {
                              matchFailed("\">>=\"");
                            }
                          }
                          if (result13 !== null) {
                            var result6 = result13;
                          } else {
                            if (input.substr(pos, 2) === "&=") {
                              var result12 = "&=";
                              pos += 2;
                            } else {
                              var result12 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"&=\"");
                              }
                            }
                            if (result12 !== null) {
                              var result6 = result12;
                            } else {
                              if (input.substr(pos, 2) === "^=") {
                                var result11 = "^=";
                                pos += 2;
                              } else {
                                var result11 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"^=\"");
                                }
                              }
                              if (result11 !== null) {
                                var result6 = result11;
                              } else {
                                if (input.substr(pos, 2) === "|=") {
                                  var result10 = "|=";
                                  pos += 2;
                                } else {
                                  var result10 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"|=\"");
                                  }
                                }
                                if (result10 !== null) {
                                  var result6 = result10;
                                } else {
                                  var result6 = null;;
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            }
            if (result6 !== null) {
              var result9 = parse__();
              var result7 = result9 !== null ? result9 : '';
              if (result7 !== null) {
                var result8 = parse_assignment_expression();
                if (result8 !== null) {
                  var result3 = [result4, result5, result6, result7, result8];
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(variable, operator, expression) {
                return new node({
                  type: "binary",
                  operator: new node({
                    type: "operator",
                    operator: operator
                  }),
                  left: variable,
                  right: expression
                });
              })(result3[0], result3[2], result3[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_conditional_expression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_condition() {
        var cacheKey = 'condition@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse_locally_specified_type();
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_identifier();
            if (result5 !== null) {
              var result11 = parse__();
              var result6 = result11 !== null ? result11 : '';
              if (result6 !== null) {
                if (input.substr(pos, 1) === "=") {
                  var result7 = "=";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"=\"");
                  }
                }
                if (result7 !== null) {
                  var result10 = parse__();
                  var result8 = result10 !== null ? result10 : '';
                  if (result8 !== null) {
                    var result9 = parse_assignment_expression();
                    if (result9 !== null) {
                      var result2 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result2 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_assignment_expression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
    // Map containing the names of structs defined in the shader mapped to "true".
      
    var typeNames = { };
      
  
      
    // Ideintifer for each node.
      
    var next_id = 0;
      
  
      
    // The type of shader being parsed.  This sould be set before parsing begins.
      
    // This allows us to reject invalid constructs such as attribute declaration
      
    // in a fragment shader or discard ina vertex shader.
      
    var shaderType = "vs";
      
  
      
    /** @constructor */
      
    function node(extraProperties) {
      
      this.id = next_id++;
      
      this.line = computeErrorPosition().line;
      
      for (var prop in extraProperties) {
      
          if (extraProperties.hasOwnProperty(prop)) {
      
            this[prop] = extraProperties[prop];
      
          }
      
      }
      
    };
      
  
      
    // Helper function to daisy chain together a series of binary operations.
      
    function daisy_chain(head, tail) {
      
      var result = head;
      
      for (var i = 0; i < tail.length; i++) {
      
        result = new node({
      
          type: "binary",
      
          operator: tail[i][1],
      
          left: result,
      
          right: tail[i][3]
      
        });
      
      }
      
      return result;
      
    };
      
  
      
    // Generates AST Nodes for a preprocessor branch.
      
    function preprocessor_branch(if_directive,
      
                                 elif_directives,
      
                                 else_directive) {
      
      var elseList = elif_directives;
      
      if (else_directive) {
      
        elseList = elseList.concat([else_directive]);
      
      }
      
      var result = if_directive[0];
      
      result.guarded_statements = if_directive[1].statements;
      
      var current_branch = result;
      
      for (var i = 0; i < elseList.length; i++) {
      
        current_branch.elseBody = elseList[i][0];
      
        current_branch.elseBody.guarded_statements =
      
          elseList[i][1].statements;
      
        current_branch = current_branch.elseBody;
      
      }
      
      return result;
      
    };
      
  
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
